/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TaxSummary implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer nationId;
    private final Integer allianceId;
    private final Integer taxBase;
    private final byte[] noInternalApplied;
    private final byte[] noInternalUnapplied;
    private final byte[] internalApplied;
    private final byte[] internalUnapplied;
    private final Long date;

    public TaxSummary(TaxSummary value) {
        this.nationId = value.nationId;
        this.allianceId = value.allianceId;
        this.taxBase = value.taxBase;
        this.noInternalApplied = value.noInternalApplied;
        this.noInternalUnapplied = value.noInternalUnapplied;
        this.internalApplied = value.internalApplied;
        this.internalUnapplied = value.internalUnapplied;
        this.date = value.date;
    }

    public TaxSummary(
        Integer nationId,
        Integer allianceId,
        Integer taxBase,
        byte[] noInternalApplied,
        byte[] noInternalUnapplied,
        byte[] internalApplied,
        byte[] internalUnapplied,
        Long date
    ) {
        this.nationId = nationId;
        this.allianceId = allianceId;
        this.taxBase = taxBase;
        this.noInternalApplied = noInternalApplied;
        this.noInternalUnapplied = noInternalUnapplied;
        this.internalApplied = internalApplied;
        this.internalUnapplied = internalUnapplied;
        this.date = date;
    }

    /**
     * Getter for <code>TAX_SUMMARY.nation_id</code>.
     */
    public Integer getNationId() {
        return this.nationId;
    }

    /**
     * Getter for <code>TAX_SUMMARY.alliance_id</code>.
     */
    public Integer getAllianceId() {
        return this.allianceId;
    }

    /**
     * Getter for <code>TAX_SUMMARY.tax_base</code>.
     */
    public Integer getTaxBase() {
        return this.taxBase;
    }

    /**
     * Getter for <code>TAX_SUMMARY.no_internal_applied</code>.
     */
    public byte[] getNoInternalApplied() {
        return this.noInternalApplied;
    }

    /**
     * Getter for <code>TAX_SUMMARY.no_internal_unapplied</code>.
     */
    public byte[] getNoInternalUnapplied() {
        return this.noInternalUnapplied;
    }

    /**
     * Getter for <code>TAX_SUMMARY.internal_applied</code>.
     */
    public byte[] getInternalApplied() {
        return this.internalApplied;
    }

    /**
     * Getter for <code>TAX_SUMMARY.internal_unapplied</code>.
     */
    public byte[] getInternalUnapplied() {
        return this.internalUnapplied;
    }

    /**
     * Getter for <code>TAX_SUMMARY.date</code>.
     */
    public Long getDate() {
        return this.date;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TaxSummary other = (TaxSummary) obj;
        if (this.nationId == null) {
            if (other.nationId != null)
                return false;
        }
        else if (!this.nationId.equals(other.nationId))
            return false;
        if (this.allianceId == null) {
            if (other.allianceId != null)
                return false;
        }
        else if (!this.allianceId.equals(other.allianceId))
            return false;
        if (this.taxBase == null) {
            if (other.taxBase != null)
                return false;
        }
        else if (!this.taxBase.equals(other.taxBase))
            return false;
        if (this.noInternalApplied == null) {
            if (other.noInternalApplied != null)
                return false;
        }
        else if (!Arrays.equals(this.noInternalApplied, other.noInternalApplied))
            return false;
        if (this.noInternalUnapplied == null) {
            if (other.noInternalUnapplied != null)
                return false;
        }
        else if (!Arrays.equals(this.noInternalUnapplied, other.noInternalUnapplied))
            return false;
        if (this.internalApplied == null) {
            if (other.internalApplied != null)
                return false;
        }
        else if (!Arrays.equals(this.internalApplied, other.internalApplied))
            return false;
        if (this.internalUnapplied == null) {
            if (other.internalUnapplied != null)
                return false;
        }
        else if (!Arrays.equals(this.internalUnapplied, other.internalUnapplied))
            return false;
        if (this.date == null) {
            if (other.date != null)
                return false;
        }
        else if (!this.date.equals(other.date))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.nationId == null) ? 0 : this.nationId.hashCode());
        result = prime * result + ((this.allianceId == null) ? 0 : this.allianceId.hashCode());
        result = prime * result + ((this.taxBase == null) ? 0 : this.taxBase.hashCode());
        result = prime * result + ((this.noInternalApplied == null) ? 0 : Arrays.hashCode(this.noInternalApplied));
        result = prime * result + ((this.noInternalUnapplied == null) ? 0 : Arrays.hashCode(this.noInternalUnapplied));
        result = prime * result + ((this.internalApplied == null) ? 0 : Arrays.hashCode(this.internalApplied));
        result = prime * result + ((this.internalUnapplied == null) ? 0 : Arrays.hashCode(this.internalUnapplied));
        result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TaxSummary (");

        sb.append(nationId);
        sb.append(", ").append(allianceId);
        sb.append(", ").append(taxBase);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(date);

        sb.append(")");
        return sb.toString();
    }
}
