/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.Collection;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.TaxSummaryRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TaxSummary extends TableImpl<TaxSummaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TAX_SUMMARY</code>
     */
    public static final TaxSummary TAX_SUMMARY = new TaxSummary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxSummaryRecord> getRecordType() {
        return TaxSummaryRecord.class;
    }

    /**
     * The column <code>TAX_SUMMARY.nation_id</code>.
     */
    public final TableField<TaxSummaryRecord, Integer> NATION_ID = createField(DSL.name("nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_SUMMARY.alliance_id</code>.
     */
    public final TableField<TaxSummaryRecord, Integer> ALLIANCE_ID = createField(DSL.name("alliance_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_SUMMARY.no_internal</code>.
     */
    public final TableField<TaxSummaryRecord, byte[]> NO_INTERNAL = createField(DSL.name("no_internal"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>TAX_SUMMARY.internal_applied</code>.
     */
    public final TableField<TaxSummaryRecord, byte[]> INTERNAL_APPLIED = createField(DSL.name("internal_applied"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>TAX_SUMMARY.internal_unapplied</code>.
     */
    public final TableField<TaxSummaryRecord, byte[]> INTERNAL_UNAPPLIED = createField(DSL.name("internal_unapplied"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>TAX_SUMMARY.date</code>.
     */
    public final TableField<TaxSummaryRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    private TaxSummary(Name alias, Table<TaxSummaryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TaxSummary(Name alias, Table<TaxSummaryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>TAX_SUMMARY</code> table reference
     */
    public TaxSummary(String alias) {
        this(DSL.name(alias), TAX_SUMMARY);
    }

    /**
     * Create an aliased <code>TAX_SUMMARY</code> table reference
     */
    public TaxSummary(Name alias) {
        this(alias, TAX_SUMMARY);
    }

    /**
     * Create a <code>TAX_SUMMARY</code> table reference
     */
    public TaxSummary() {
        this(DSL.name("TAX_SUMMARY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaxSummaryRecord> getPrimaryKey() {
        return Keys.TAX_SUMMARY__PK_TAX_SUMMARY;
    }

    @Override
    public TaxSummary as(String alias) {
        return new TaxSummary(DSL.name(alias), this);
    }

    @Override
    public TaxSummary as(Name alias) {
        return new TaxSummary(alias, this);
    }

    @Override
    public TaxSummary as(Table<?> alias) {
        return new TaxSummary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxSummary rename(String name) {
        return new TaxSummary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxSummary rename(Name name) {
        return new TaxSummary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxSummary rename(Table<?> name) {
        return new TaxSummary(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary where(Condition condition) {
        return new TaxSummary(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxSummary where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxSummary where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxSummary where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxSummary where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxSummary whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
