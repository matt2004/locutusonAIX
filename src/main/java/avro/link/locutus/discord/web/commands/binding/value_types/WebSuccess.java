/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebSuccess extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6154025328211073382L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebSuccess\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"success\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebSuccess> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebSuccess> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebSuccess> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebSuccess> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebSuccess> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebSuccess to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebSuccess from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebSuccess instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebSuccess fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence message;
  private boolean success;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebSuccess() {}

  /**
   * All-args constructor.
   * @param message The new value for message
   * @param success The new value for success
   */
  public WebSuccess(java.lang.CharSequence message, java.lang.Boolean success) {
    this.message = message;
    this.success = success;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return message;
    case 1: return success;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: message = (java.lang.CharSequence)value$; break;
    case 1: success = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'success' field.
   * @return The value of the 'success' field.
   */
  public boolean getSuccess() {
    return success;
  }


  /**
   * Sets the value of the 'success' field.
   * @param value the value to set.
   */
  public void setSuccess(boolean value) {
    this.success = value;
  }

  /**
   * Creates a new WebSuccess RecordBuilder.
   * @return A new WebSuccess RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder();
  }

  /**
   * Creates a new WebSuccess RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebSuccess RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder(other);
    }
  }

  /**
   * Creates a new WebSuccess RecordBuilder by copying an existing WebSuccess instance.
   * @param other The existing instance to copy.
   * @return A new WebSuccess RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebSuccess other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebSuccess instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebSuccess>
    implements org.apache.avro.data.RecordBuilder<WebSuccess> {

    private java.lang.CharSequence message;
    private boolean success;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.message)) {
        this.message = data().deepCopy(fields()[0].schema(), other.message);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.success)) {
        this.success = data().deepCopy(fields()[1].schema(), other.success);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing WebSuccess instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebSuccess other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.message)) {
        this.message = data().deepCopy(fields()[0].schema(), other.message);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.success)) {
        this.success = data().deepCopy(fields()[1].schema(), other.success);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.message = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder clearMessage() {
      message = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'success' field.
      * @return The value.
      */
    public boolean getSuccess() {
      return success;
    }


    /**
      * Sets the value of the 'success' field.
      * @param value The value of 'success'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder setSuccess(boolean value) {
      validate(fields()[1], value);
      this.success = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'success' field has been set.
      * @return True if the 'success' field has been set, false otherwise.
      */
    public boolean hasSuccess() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'success' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSuccess.Builder clearSuccess() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebSuccess build() {
      try {
        WebSuccess record = new WebSuccess();
        record.message = fieldSetFlags()[0] ? this.message : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.success = fieldSetFlags()[1] ? this.success : (java.lang.Boolean) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebSuccess>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebSuccess>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebSuccess>
    READER$ = (org.apache.avro.io.DatumReader<WebSuccess>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.message);

    out.writeBoolean(this.success);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.success = in.readBoolean();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 1:
          this.success = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










