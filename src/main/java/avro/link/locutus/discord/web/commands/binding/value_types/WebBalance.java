/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebBalance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8464238416330219189L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebBalance\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"access\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PairLongInteger\",\"namespace\":\"org.apache.avro.reflect\",\"fields\":[{\"name\":\"key\",\"type\":\"long\"},{\"name\":\"value\",\"type\":\"int\"}]},\"java-class\":\"java.util.Map\"}},{\"name\":\"breakdown\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"double\",\"java-class\":\"[D\"}}},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"include_grants\",\"type\":\"boolean\"},{\"name\":\"is_aa\",\"type\":\"boolean\"},{\"name\":\"no_access_msg\",\"type\":\"string\"},{\"name\":\"total\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"java-class\":\"[D\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebBalance> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebBalance> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebBalance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebBalance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebBalance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebBalance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebBalance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebBalance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebBalance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<org.apache.avro.reflect.PairLongInteger> access;
  private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> breakdown;
  private int id;
  private boolean include_grants;
  private boolean is_aa;
  private java.lang.CharSequence no_access_msg;
  private java.util.List<java.lang.Double> total;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebBalance() {}

  /**
   * All-args constructor.
   * @param access The new value for access
   * @param breakdown The new value for breakdown
   * @param id The new value for id
   * @param include_grants The new value for include_grants
   * @param is_aa The new value for is_aa
   * @param no_access_msg The new value for no_access_msg
   * @param total The new value for total
   */
  public WebBalance(java.util.List<org.apache.avro.reflect.PairLongInteger> access, java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> breakdown, java.lang.Integer id, java.lang.Boolean include_grants, java.lang.Boolean is_aa, java.lang.CharSequence no_access_msg, java.util.List<java.lang.Double> total) {
    this.access = access;
    this.breakdown = breakdown;
    this.id = id;
    this.include_grants = include_grants;
    this.is_aa = is_aa;
    this.no_access_msg = no_access_msg;
    this.total = total;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return access;
    case 1: return breakdown;
    case 2: return id;
    case 3: return include_grants;
    case 4: return is_aa;
    case 5: return no_access_msg;
    case 6: return total;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: access = (java.util.List<org.apache.avro.reflect.PairLongInteger>)value$; break;
    case 1: breakdown = (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>>)value$; break;
    case 2: id = (java.lang.Integer)value$; break;
    case 3: include_grants = (java.lang.Boolean)value$; break;
    case 4: is_aa = (java.lang.Boolean)value$; break;
    case 5: no_access_msg = (java.lang.CharSequence)value$; break;
    case 6: total = (java.util.List<java.lang.Double>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'access' field.
   * @return The value of the 'access' field.
   */
  public java.util.List<org.apache.avro.reflect.PairLongInteger> getAccess() {
    return access;
  }


  /**
   * Sets the value of the 'access' field.
   * @param value the value to set.
   */
  public void setAccess(java.util.List<org.apache.avro.reflect.PairLongInteger> value) {
    this.access = value;
  }

  /**
   * Gets the value of the 'breakdown' field.
   * @return The value of the 'breakdown' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> getBreakdown() {
    return breakdown;
  }


  /**
   * Sets the value of the 'breakdown' field.
   * @param value the value to set.
   */
  public void setBreakdown(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> value) {
    this.breakdown = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'include_grants' field.
   * @return The value of the 'include_grants' field.
   */
  public boolean getIncludeGrants() {
    return include_grants;
  }


  /**
   * Sets the value of the 'include_grants' field.
   * @param value the value to set.
   */
  public void setIncludeGrants(boolean value) {
    this.include_grants = value;
  }

  /**
   * Gets the value of the 'is_aa' field.
   * @return The value of the 'is_aa' field.
   */
  public boolean getIsAa() {
    return is_aa;
  }


  /**
   * Sets the value of the 'is_aa' field.
   * @param value the value to set.
   */
  public void setIsAa(boolean value) {
    this.is_aa = value;
  }

  /**
   * Gets the value of the 'no_access_msg' field.
   * @return The value of the 'no_access_msg' field.
   */
  public java.lang.CharSequence getNoAccessMsg() {
    return no_access_msg;
  }


  /**
   * Sets the value of the 'no_access_msg' field.
   * @param value the value to set.
   */
  public void setNoAccessMsg(java.lang.CharSequence value) {
    this.no_access_msg = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.util.List<java.lang.Double> getTotal() {
    return total;
  }


  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.util.List<java.lang.Double> value) {
    this.total = value;
  }

  /**
   * Creates a new WebBalance RecordBuilder.
   * @return A new WebBalance RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder();
  }

  /**
   * Creates a new WebBalance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebBalance RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder(other);
    }
  }

  /**
   * Creates a new WebBalance RecordBuilder by copying an existing WebBalance instance.
   * @param other The existing instance to copy.
   * @return A new WebBalance RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebBalance other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebBalance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebBalance>
    implements org.apache.avro.data.RecordBuilder<WebBalance> {

    private java.util.List<org.apache.avro.reflect.PairLongInteger> access;
    private java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> breakdown;
    private int id;
    private boolean include_grants;
    private boolean is_aa;
    private java.lang.CharSequence no_access_msg;
    private java.util.List<java.lang.Double> total;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.access)) {
        this.access = data().deepCopy(fields()[0].schema(), other.access);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.breakdown)) {
        this.breakdown = data().deepCopy(fields()[1].schema(), other.breakdown);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.include_grants)) {
        this.include_grants = data().deepCopy(fields()[3].schema(), other.include_grants);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.is_aa)) {
        this.is_aa = data().deepCopy(fields()[4].schema(), other.is_aa);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.no_access_msg)) {
        this.no_access_msg = data().deepCopy(fields()[5].schema(), other.no_access_msg);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.total)) {
        this.total = data().deepCopy(fields()[6].schema(), other.total);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing WebBalance instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebBalance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.access)) {
        this.access = data().deepCopy(fields()[0].schema(), other.access);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.breakdown)) {
        this.breakdown = data().deepCopy(fields()[1].schema(), other.breakdown);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.include_grants)) {
        this.include_grants = data().deepCopy(fields()[3].schema(), other.include_grants);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.is_aa)) {
        this.is_aa = data().deepCopy(fields()[4].schema(), other.is_aa);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.no_access_msg)) {
        this.no_access_msg = data().deepCopy(fields()[5].schema(), other.no_access_msg);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.total)) {
        this.total = data().deepCopy(fields()[6].schema(), other.total);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'access' field.
      * @return The value.
      */
    public java.util.List<org.apache.avro.reflect.PairLongInteger> getAccess() {
      return access;
    }


    /**
      * Sets the value of the 'access' field.
      * @param value The value of 'access'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setAccess(java.util.List<org.apache.avro.reflect.PairLongInteger> value) {
      validate(fields()[0], value);
      this.access = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'access' field has been set.
      * @return True if the 'access' field has been set, false otherwise.
      */
    public boolean hasAccess() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'access' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearAccess() {
      access = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'breakdown' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> getBreakdown() {
      return breakdown;
    }


    /**
      * Sets the value of the 'breakdown' field.
      * @param value The value of 'breakdown'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setBreakdown(java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> value) {
      validate(fields()[1], value);
      this.breakdown = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'breakdown' field has been set.
      * @return True if the 'breakdown' field has been set, false otherwise.
      */
    public boolean hasBreakdown() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'breakdown' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearBreakdown() {
      breakdown = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setId(int value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'include_grants' field.
      * @return The value.
      */
    public boolean getIncludeGrants() {
      return include_grants;
    }


    /**
      * Sets the value of the 'include_grants' field.
      * @param value The value of 'include_grants'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setIncludeGrants(boolean value) {
      validate(fields()[3], value);
      this.include_grants = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'include_grants' field has been set.
      * @return True if the 'include_grants' field has been set, false otherwise.
      */
    public boolean hasIncludeGrants() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'include_grants' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearIncludeGrants() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_aa' field.
      * @return The value.
      */
    public boolean getIsAa() {
      return is_aa;
    }


    /**
      * Sets the value of the 'is_aa' field.
      * @param value The value of 'is_aa'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setIsAa(boolean value) {
      validate(fields()[4], value);
      this.is_aa = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'is_aa' field has been set.
      * @return True if the 'is_aa' field has been set, false otherwise.
      */
    public boolean hasIsAa() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'is_aa' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearIsAa() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'no_access_msg' field.
      * @return The value.
      */
    public java.lang.CharSequence getNoAccessMsg() {
      return no_access_msg;
    }


    /**
      * Sets the value of the 'no_access_msg' field.
      * @param value The value of 'no_access_msg'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setNoAccessMsg(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.no_access_msg = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'no_access_msg' field has been set.
      * @return True if the 'no_access_msg' field has been set, false otherwise.
      */
    public boolean hasNoAccessMsg() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'no_access_msg' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearNoAccessMsg() {
      no_access_msg = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getTotal() {
      return total;
    }


    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder setTotal(java.util.List<java.lang.Double> value) {
      validate(fields()[6], value);
      this.total = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebBalance.Builder clearTotal() {
      total = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebBalance build() {
      try {
        WebBalance record = new WebBalance();
        record.access = fieldSetFlags()[0] ? this.access : (java.util.List<org.apache.avro.reflect.PairLongInteger>) defaultValue(fields()[0]);
        record.breakdown = fieldSetFlags()[1] ? this.breakdown : (java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>>) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.Integer) defaultValue(fields()[2]);
        record.include_grants = fieldSetFlags()[3] ? this.include_grants : (java.lang.Boolean) defaultValue(fields()[3]);
        record.is_aa = fieldSetFlags()[4] ? this.is_aa : (java.lang.Boolean) defaultValue(fields()[4]);
        record.no_access_msg = fieldSetFlags()[5] ? this.no_access_msg : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.total = fieldSetFlags()[6] ? this.total : (java.util.List<java.lang.Double>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebBalance>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebBalance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebBalance>
    READER$ = (org.apache.avro.io.DatumReader<WebBalance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.access.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.apache.avro.reflect.PairLongInteger e0: this.access) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.breakdown.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<java.lang.Double>> e1: this.breakdown.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.util.List<java.lang.Double> v1 = e1.getValue();
      long size2 = v1.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Double e2: v1) {
        actualSize2++;
        out.startItem();
        out.writeDouble(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    out.writeInt(this.id);

    out.writeBoolean(this.include_grants);

    out.writeBoolean(this.is_aa);

    out.writeString(this.no_access_msg);

    long size3 = this.total.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.Double e3: this.total) {
      actualSize3++;
      out.startItem();
      out.writeDouble(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<org.apache.avro.reflect.PairLongInteger> a0 = this.access;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.apache.avro.reflect.PairLongInteger>((int)size0, SCHEMA$.getField("access").schema());
        this.access = a0;
      } else a0.clear();
      SpecificData.Array<org.apache.avro.reflect.PairLongInteger> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.avro.reflect.PairLongInteger>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.apache.avro.reflect.PairLongInteger e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.apache.avro.reflect.PairLongInteger();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> m1 = this.breakdown; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.util.List<java.lang.Double>>((int)(size1 * 4)/3 + 1);
        this.breakdown = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.util.List<java.lang.Double> v1 = null;
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Double> a2 = v1;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("breakdown").schema().getValueType());
            v1 = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readDouble();
              a2.add(e2);
            }
          }
          m1.put(k1, v1);
        }
      }

      this.id = in.readInt();

      this.include_grants = in.readBoolean();

      this.is_aa = in.readBoolean();

      this.no_access_msg = in.readString(this.no_access_msg instanceof Utf8 ? (Utf8)this.no_access_msg : null);

      long size3 = in.readArrayStart();
      java.util.List<java.lang.Double> a3 = this.total;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("total").schema());
        this.total = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readDouble();
          a3.add(e3);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<org.apache.avro.reflect.PairLongInteger> a0 = this.access;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.apache.avro.reflect.PairLongInteger>((int)size0, SCHEMA$.getField("access").schema());
            this.access = a0;
          } else a0.clear();
          SpecificData.Array<org.apache.avro.reflect.PairLongInteger> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.avro.reflect.PairLongInteger>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.apache.avro.reflect.PairLongInteger e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.apache.avro.reflect.PairLongInteger();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.util.List<java.lang.Double>> m1 = this.breakdown; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.util.List<java.lang.Double>>((int)(size1 * 4)/3 + 1);
            this.breakdown = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.util.List<java.lang.Double> v1 = null;
              long size2 = in.readArrayStart();
              java.util.List<java.lang.Double> a2 = v1;
              if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("breakdown").schema().getValueType());
                v1 = a2;
              } else a2.clear();
              SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
              for ( ; 0 < size2; size2 = in.arrayNext()) {
                for ( ; size2 != 0; size2--) {
                  java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
                  e2 = in.readDouble();
                  a2.add(e2);
                }
              }
              m1.put(k1, v1);
            }
          }
          break;

        case 2:
          this.id = in.readInt();
          break;

        case 3:
          this.include_grants = in.readBoolean();
          break;

        case 4:
          this.is_aa = in.readBoolean();
          break;

        case 5:
          this.no_access_msg = in.readString(this.no_access_msg instanceof Utf8 ? (Utf8)this.no_access_msg : null);
          break;

        case 6:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Double> a3 = this.total;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("total").schema());
            this.total = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readDouble();
              a3.add(e3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










