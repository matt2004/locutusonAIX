/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebTargets extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2026543473053240239L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebTargets\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"include_strength\",\"type\":\"boolean\"},{\"name\":\"self\",\"type\":{\"type\":\"record\",\"name\":\"WebTarget\",\"fields\":[{\"name\":\"active_ms\",\"type\":\"long\"},{\"name\":\"actual\",\"type\":\"double\"},{\"name\":\"aircraft\",\"type\":\"int\"},{\"name\":\"alliance\",\"type\":\"string\"},{\"name\":\"alliance_id\",\"type\":\"int\"},{\"name\":\"avg_infra\",\"type\":\"double\"},{\"name\":\"beige_turns\",\"type\":\"int\"},{\"name\":\"color\",\"type\":{\"type\":\"enum\",\"name\":\"NationColor\",\"namespace\":\"link.locutus.discord.apiv1.enums\",\"symbols\":[\"AQUA\",\"BEIGE\",\"BLACK\",\"BLUE\",\"BROWN\",\"GRAY\",\"GREEN\",\"LIME\",\"MAROON\",\"OLIVE\",\"ORANGE\",\"PINK\",\"PURPLE\",\"RED\",\"WHITE\",\"YELLOW\"]}},{\"name\":\"def\",\"type\":\"int\"},{\"name\":\"expected\",\"type\":\"double\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"missile\",\"type\":\"int\"},{\"name\":\"nation\",\"type\":\"string\"},{\"name\":\"nuke\",\"type\":\"int\"},{\"name\":\"off\",\"type\":\"int\"},{\"name\":\"position\",\"type\":\"int\"},{\"name\":\"score\",\"type\":\"double\"},{\"name\":\"ship\",\"type\":\"int\"},{\"name\":\"soldier\",\"type\":\"int\"},{\"name\":\"spies\",\"type\":\"int\"},{\"name\":\"strength\",\"type\":\"double\"},{\"name\":\"tank\",\"type\":\"int\"}]}},{\"name\":\"targets\",\"type\":{\"type\":\"array\",\"items\":\"WebTarget\",\"java-class\":\"java.util.List\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebTargets> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebTargets> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebTargets> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebTargets> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebTargets> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebTargets to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebTargets from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebTargets instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebTargets fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private boolean include_strength;
  private link.locutus.discord.web.commands.binding.value_types.WebTarget self;
  private java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> targets;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebTargets() {}

  /**
   * All-args constructor.
   * @param include_strength The new value for include_strength
   * @param self The new value for self
   * @param targets The new value for targets
   */
  public WebTargets(java.lang.Boolean include_strength, link.locutus.discord.web.commands.binding.value_types.WebTarget self, java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> targets) {
    this.include_strength = include_strength;
    this.self = self;
    this.targets = targets;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return include_strength;
    case 1: return self;
    case 2: return targets;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: include_strength = (java.lang.Boolean)value$; break;
    case 1: self = (link.locutus.discord.web.commands.binding.value_types.WebTarget)value$; break;
    case 2: targets = (java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'include_strength' field.
   * @return The value of the 'include_strength' field.
   */
  public boolean getIncludeStrength() {
    return include_strength;
  }


  /**
   * Sets the value of the 'include_strength' field.
   * @param value the value to set.
   */
  public void setIncludeStrength(boolean value) {
    this.include_strength = value;
  }

  /**
   * Gets the value of the 'self' field.
   * @return The value of the 'self' field.
   */
  public link.locutus.discord.web.commands.binding.value_types.WebTarget getSelf() {
    return self;
  }


  /**
   * Sets the value of the 'self' field.
   * @param value the value to set.
   */
  public void setSelf(link.locutus.discord.web.commands.binding.value_types.WebTarget value) {
    this.self = value;
  }

  /**
   * Gets the value of the 'targets' field.
   * @return The value of the 'targets' field.
   */
  public java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> getTargets() {
    return targets;
  }


  /**
   * Sets the value of the 'targets' field.
   * @param value the value to set.
   */
  public void setTargets(java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> value) {
    this.targets = value;
  }

  /**
   * Creates a new WebTargets RecordBuilder.
   * @return A new WebTargets RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder();
  }

  /**
   * Creates a new WebTargets RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebTargets RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder(other);
    }
  }

  /**
   * Creates a new WebTargets RecordBuilder by copying an existing WebTargets instance.
   * @param other The existing instance to copy.
   * @return A new WebTargets RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTargets other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebTargets instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebTargets>
    implements org.apache.avro.data.RecordBuilder<WebTargets> {

    private boolean include_strength;
    private link.locutus.discord.web.commands.binding.value_types.WebTarget self;
    private link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder selfBuilder;
    private java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> targets;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.include_strength)) {
        this.include_strength = data().deepCopy(fields()[0].schema(), other.include_strength);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.self)) {
        this.self = data().deepCopy(fields()[1].schema(), other.self);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasSelfBuilder()) {
        this.selfBuilder = link.locutus.discord.web.commands.binding.value_types.WebTarget.newBuilder(other.getSelfBuilder());
      }
      if (isValidValue(fields()[2], other.targets)) {
        this.targets = data().deepCopy(fields()[2].schema(), other.targets);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing WebTargets instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTargets other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.include_strength)) {
        this.include_strength = data().deepCopy(fields()[0].schema(), other.include_strength);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.self)) {
        this.self = data().deepCopy(fields()[1].schema(), other.self);
        fieldSetFlags()[1] = true;
      }
      this.selfBuilder = null;
      if (isValidValue(fields()[2], other.targets)) {
        this.targets = data().deepCopy(fields()[2].schema(), other.targets);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'include_strength' field.
      * @return The value.
      */
    public boolean getIncludeStrength() {
      return include_strength;
    }


    /**
      * Sets the value of the 'include_strength' field.
      * @param value The value of 'include_strength'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder setIncludeStrength(boolean value) {
      validate(fields()[0], value);
      this.include_strength = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'include_strength' field has been set.
      * @return True if the 'include_strength' field has been set, false otherwise.
      */
    public boolean hasIncludeStrength() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'include_strength' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder clearIncludeStrength() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'self' field.
      * @return The value.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget getSelf() {
      return self;
    }


    /**
      * Sets the value of the 'self' field.
      * @param value The value of 'self'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder setSelf(link.locutus.discord.web.commands.binding.value_types.WebTarget value) {
      validate(fields()[1], value);
      this.selfBuilder = null;
      this.self = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'self' field has been set.
      * @return True if the 'self' field has been set, false otherwise.
      */
    public boolean hasSelf() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'self' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder getSelfBuilder() {
      if (selfBuilder == null) {
        if (hasSelf()) {
          setSelfBuilder(link.locutus.discord.web.commands.binding.value_types.WebTarget.newBuilder(self));
        } else {
          setSelfBuilder(link.locutus.discord.web.commands.binding.value_types.WebTarget.newBuilder());
        }
      }
      return selfBuilder;
    }

    /**
     * Sets the Builder instance for the 'self' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder setSelfBuilder(link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder value) {
      clearSelf();
      selfBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'self' field has an active Builder instance
     * @return True if the 'self' field has an active Builder instance
     */
    public boolean hasSelfBuilder() {
      return selfBuilder != null;
    }

    /**
      * Clears the value of the 'self' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder clearSelf() {
      self = null;
      selfBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'targets' field.
      * @return The value.
      */
    public java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> getTargets() {
      return targets;
    }


    /**
      * Sets the value of the 'targets' field.
      * @param value The value of 'targets'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder setTargets(java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> value) {
      validate(fields()[2], value);
      this.targets = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'targets' field has been set.
      * @return True if the 'targets' field has been set, false otherwise.
      */
    public boolean hasTargets() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'targets' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTargets.Builder clearTargets() {
      targets = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebTargets build() {
      try {
        WebTargets record = new WebTargets();
        record.include_strength = fieldSetFlags()[0] ? this.include_strength : (java.lang.Boolean) defaultValue(fields()[0]);
        if (selfBuilder != null) {
          try {
            record.self = this.selfBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("self"));
            throw e;
          }
        } else {
          record.self = fieldSetFlags()[1] ? this.self : (link.locutus.discord.web.commands.binding.value_types.WebTarget) defaultValue(fields()[1]);
        }
        record.targets = fieldSetFlags()[2] ? this.targets : (java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebTargets>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebTargets>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebTargets>
    READER$ = (org.apache.avro.io.DatumReader<WebTargets>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeBoolean(this.include_strength);

    this.self.customEncode(out);

    long size0 = this.targets.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (link.locutus.discord.web.commands.binding.value_types.WebTarget e0: this.targets) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.include_strength = in.readBoolean();

      if (this.self == null) {
        this.self = new link.locutus.discord.web.commands.binding.value_types.WebTarget();
      }
      this.self.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> a0 = this.targets;
      if (a0 == null) {
        a0 = new SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget>((int)size0, SCHEMA$.getField("targets").schema());
        this.targets = a0;
      } else a0.clear();
      SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          link.locutus.discord.web.commands.binding.value_types.WebTarget e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new link.locutus.discord.web.commands.binding.value_types.WebTarget();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.include_strength = in.readBoolean();
          break;

        case 1:
          if (this.self == null) {
            this.self = new link.locutus.discord.web.commands.binding.value_types.WebTarget();
          }
          this.self.customDecode(in);
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<link.locutus.discord.web.commands.binding.value_types.WebTarget> a0 = this.targets;
          if (a0 == null) {
            a0 = new SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget>((int)size0, SCHEMA$.getField("targets").schema());
            this.targets = a0;
          } else a0.clear();
          SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<link.locutus.discord.web.commands.binding.value_types.WebTarget>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              link.locutus.discord.web.commands.binding.value_types.WebTarget e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new link.locutus.discord.web.commands.binding.value_types.WebTarget();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










