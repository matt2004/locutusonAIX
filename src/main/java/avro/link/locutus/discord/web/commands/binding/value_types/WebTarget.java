/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebTarget extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -450288456606368492L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebTarget\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"active_ms\",\"type\":\"long\"},{\"name\":\"actual\",\"type\":\"double\"},{\"name\":\"aircraft\",\"type\":\"int\"},{\"name\":\"alliance\",\"type\":\"string\"},{\"name\":\"alliance_id\",\"type\":\"int\"},{\"name\":\"avg_infra\",\"type\":\"double\"},{\"name\":\"beige_turns\",\"type\":\"int\"},{\"name\":\"color\",\"type\":{\"type\":\"enum\",\"name\":\"NationColor\",\"namespace\":\"link.locutus.discord.apiv1.enums\",\"symbols\":[\"AQUA\",\"BEIGE\",\"BLACK\",\"BLUE\",\"BROWN\",\"GRAY\",\"GREEN\",\"LIME\",\"MAROON\",\"OLIVE\",\"ORANGE\",\"PINK\",\"PURPLE\",\"RED\",\"WHITE\",\"YELLOW\"]}},{\"name\":\"def\",\"type\":\"int\"},{\"name\":\"expected\",\"type\":\"double\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"missile\",\"type\":\"int\"},{\"name\":\"nation\",\"type\":\"string\"},{\"name\":\"nuke\",\"type\":\"int\"},{\"name\":\"off\",\"type\":\"int\"},{\"name\":\"position\",\"type\":\"int\"},{\"name\":\"score\",\"type\":\"double\"},{\"name\":\"ship\",\"type\":\"int\"},{\"name\":\"soldier\",\"type\":\"int\"},{\"name\":\"spies\",\"type\":\"int\"},{\"name\":\"strength\",\"type\":\"double\"},{\"name\":\"tank\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebTarget> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebTarget> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebTarget> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebTarget> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebTarget> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebTarget to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebTarget from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebTarget instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebTarget fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long active_ms;
  private double actual;
  private int aircraft;
  private java.lang.CharSequence alliance;
  private int alliance_id;
  private double avg_infra;
  private int beige_turns;
  private link.locutus.discord.apiv1.enums.NationColor color;
  private int def;
  private double expected;
  private int id;
  private int missile;
  private java.lang.CharSequence nation;
  private int nuke;
  private int off;
  private int position;
  private double score;
  private int ship;
  private int soldier;
  private int spies;
  private double strength;
  private int tank;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebTarget() {}

  /**
   * All-args constructor.
   * @param active_ms The new value for active_ms
   * @param actual The new value for actual
   * @param aircraft The new value for aircraft
   * @param alliance The new value for alliance
   * @param alliance_id The new value for alliance_id
   * @param avg_infra The new value for avg_infra
   * @param beige_turns The new value for beige_turns
   * @param color The new value for color
   * @param def The new value for def
   * @param expected The new value for expected
   * @param id The new value for id
   * @param missile The new value for missile
   * @param nation The new value for nation
   * @param nuke The new value for nuke
   * @param off The new value for off
   * @param position The new value for position
   * @param score The new value for score
   * @param ship The new value for ship
   * @param soldier The new value for soldier
   * @param spies The new value for spies
   * @param strength The new value for strength
   * @param tank The new value for tank
   */
  public WebTarget(java.lang.Long active_ms, java.lang.Double actual, java.lang.Integer aircraft, java.lang.CharSequence alliance, java.lang.Integer alliance_id, java.lang.Double avg_infra, java.lang.Integer beige_turns, link.locutus.discord.apiv1.enums.NationColor color, java.lang.Integer def, java.lang.Double expected, java.lang.Integer id, java.lang.Integer missile, java.lang.CharSequence nation, java.lang.Integer nuke, java.lang.Integer off, java.lang.Integer position, java.lang.Double score, java.lang.Integer ship, java.lang.Integer soldier, java.lang.Integer spies, java.lang.Double strength, java.lang.Integer tank) {
    this.active_ms = active_ms;
    this.actual = actual;
    this.aircraft = aircraft;
    this.alliance = alliance;
    this.alliance_id = alliance_id;
    this.avg_infra = avg_infra;
    this.beige_turns = beige_turns;
    this.color = color;
    this.def = def;
    this.expected = expected;
    this.id = id;
    this.missile = missile;
    this.nation = nation;
    this.nuke = nuke;
    this.off = off;
    this.position = position;
    this.score = score;
    this.ship = ship;
    this.soldier = soldier;
    this.spies = spies;
    this.strength = strength;
    this.tank = tank;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return active_ms;
    case 1: return actual;
    case 2: return aircraft;
    case 3: return alliance;
    case 4: return alliance_id;
    case 5: return avg_infra;
    case 6: return beige_turns;
    case 7: return color;
    case 8: return def;
    case 9: return expected;
    case 10: return id;
    case 11: return missile;
    case 12: return nation;
    case 13: return nuke;
    case 14: return off;
    case 15: return position;
    case 16: return score;
    case 17: return ship;
    case 18: return soldier;
    case 19: return spies;
    case 20: return strength;
    case 21: return tank;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: active_ms = (java.lang.Long)value$; break;
    case 1: actual = (java.lang.Double)value$; break;
    case 2: aircraft = (java.lang.Integer)value$; break;
    case 3: alliance = (java.lang.CharSequence)value$; break;
    case 4: alliance_id = (java.lang.Integer)value$; break;
    case 5: avg_infra = (java.lang.Double)value$; break;
    case 6: beige_turns = (java.lang.Integer)value$; break;
    case 7: color = (link.locutus.discord.apiv1.enums.NationColor)value$; break;
    case 8: def = (java.lang.Integer)value$; break;
    case 9: expected = (java.lang.Double)value$; break;
    case 10: id = (java.lang.Integer)value$; break;
    case 11: missile = (java.lang.Integer)value$; break;
    case 12: nation = (java.lang.CharSequence)value$; break;
    case 13: nuke = (java.lang.Integer)value$; break;
    case 14: off = (java.lang.Integer)value$; break;
    case 15: position = (java.lang.Integer)value$; break;
    case 16: score = (java.lang.Double)value$; break;
    case 17: ship = (java.lang.Integer)value$; break;
    case 18: soldier = (java.lang.Integer)value$; break;
    case 19: spies = (java.lang.Integer)value$; break;
    case 20: strength = (java.lang.Double)value$; break;
    case 21: tank = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'active_ms' field.
   * @return The value of the 'active_ms' field.
   */
  public long getActiveMs() {
    return active_ms;
  }


  /**
   * Sets the value of the 'active_ms' field.
   * @param value the value to set.
   */
  public void setActiveMs(long value) {
    this.active_ms = value;
  }

  /**
   * Gets the value of the 'actual' field.
   * @return The value of the 'actual' field.
   */
  public double getActual() {
    return actual;
  }


  /**
   * Sets the value of the 'actual' field.
   * @param value the value to set.
   */
  public void setActual(double value) {
    this.actual = value;
  }

  /**
   * Gets the value of the 'aircraft' field.
   * @return The value of the 'aircraft' field.
   */
  public int getAircraft() {
    return aircraft;
  }


  /**
   * Sets the value of the 'aircraft' field.
   * @param value the value to set.
   */
  public void setAircraft(int value) {
    this.aircraft = value;
  }

  /**
   * Gets the value of the 'alliance' field.
   * @return The value of the 'alliance' field.
   */
  public java.lang.CharSequence getAlliance() {
    return alliance;
  }


  /**
   * Sets the value of the 'alliance' field.
   * @param value the value to set.
   */
  public void setAlliance(java.lang.CharSequence value) {
    this.alliance = value;
  }

  /**
   * Gets the value of the 'alliance_id' field.
   * @return The value of the 'alliance_id' field.
   */
  public int getAllianceId() {
    return alliance_id;
  }


  /**
   * Sets the value of the 'alliance_id' field.
   * @param value the value to set.
   */
  public void setAllianceId(int value) {
    this.alliance_id = value;
  }

  /**
   * Gets the value of the 'avg_infra' field.
   * @return The value of the 'avg_infra' field.
   */
  public double getAvgInfra() {
    return avg_infra;
  }


  /**
   * Sets the value of the 'avg_infra' field.
   * @param value the value to set.
   */
  public void setAvgInfra(double value) {
    this.avg_infra = value;
  }

  /**
   * Gets the value of the 'beige_turns' field.
   * @return The value of the 'beige_turns' field.
   */
  public int getBeigeTurns() {
    return beige_turns;
  }


  /**
   * Sets the value of the 'beige_turns' field.
   * @param value the value to set.
   */
  public void setBeigeTurns(int value) {
    this.beige_turns = value;
  }

  /**
   * Gets the value of the 'color' field.
   * @return The value of the 'color' field.
   */
  public link.locutus.discord.apiv1.enums.NationColor getColor() {
    return color;
  }


  /**
   * Sets the value of the 'color' field.
   * @param value the value to set.
   */
  public void setColor(link.locutus.discord.apiv1.enums.NationColor value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'def' field.
   * @return The value of the 'def' field.
   */
  public int getDef() {
    return def;
  }


  /**
   * Sets the value of the 'def' field.
   * @param value the value to set.
   */
  public void setDef(int value) {
    this.def = value;
  }

  /**
   * Gets the value of the 'expected' field.
   * @return The value of the 'expected' field.
   */
  public double getExpected() {
    return expected;
  }


  /**
   * Sets the value of the 'expected' field.
   * @param value the value to set.
   */
  public void setExpected(double value) {
    this.expected = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'missile' field.
   * @return The value of the 'missile' field.
   */
  public int getMissile() {
    return missile;
  }


  /**
   * Sets the value of the 'missile' field.
   * @param value the value to set.
   */
  public void setMissile(int value) {
    this.missile = value;
  }

  /**
   * Gets the value of the 'nation' field.
   * @return The value of the 'nation' field.
   */
  public java.lang.CharSequence getNation() {
    return nation;
  }


  /**
   * Sets the value of the 'nation' field.
   * @param value the value to set.
   */
  public void setNation(java.lang.CharSequence value) {
    this.nation = value;
  }

  /**
   * Gets the value of the 'nuke' field.
   * @return The value of the 'nuke' field.
   */
  public int getNuke() {
    return nuke;
  }


  /**
   * Sets the value of the 'nuke' field.
   * @param value the value to set.
   */
  public void setNuke(int value) {
    this.nuke = value;
  }

  /**
   * Gets the value of the 'off' field.
   * @return The value of the 'off' field.
   */
  public int getOff() {
    return off;
  }


  /**
   * Sets the value of the 'off' field.
   * @param value the value to set.
   */
  public void setOff(int value) {
    this.off = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public int getPosition() {
    return position;
  }


  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(int value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'score' field.
   * @return The value of the 'score' field.
   */
  public double getScore() {
    return score;
  }


  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(double value) {
    this.score = value;
  }

  /**
   * Gets the value of the 'ship' field.
   * @return The value of the 'ship' field.
   */
  public int getShip() {
    return ship;
  }


  /**
   * Sets the value of the 'ship' field.
   * @param value the value to set.
   */
  public void setShip(int value) {
    this.ship = value;
  }

  /**
   * Gets the value of the 'soldier' field.
   * @return The value of the 'soldier' field.
   */
  public int getSoldier() {
    return soldier;
  }


  /**
   * Sets the value of the 'soldier' field.
   * @param value the value to set.
   */
  public void setSoldier(int value) {
    this.soldier = value;
  }

  /**
   * Gets the value of the 'spies' field.
   * @return The value of the 'spies' field.
   */
  public int getSpies() {
    return spies;
  }


  /**
   * Sets the value of the 'spies' field.
   * @param value the value to set.
   */
  public void setSpies(int value) {
    this.spies = value;
  }

  /**
   * Gets the value of the 'strength' field.
   * @return The value of the 'strength' field.
   */
  public double getStrength() {
    return strength;
  }


  /**
   * Sets the value of the 'strength' field.
   * @param value the value to set.
   */
  public void setStrength(double value) {
    this.strength = value;
  }

  /**
   * Gets the value of the 'tank' field.
   * @return The value of the 'tank' field.
   */
  public int getTank() {
    return tank;
  }


  /**
   * Sets the value of the 'tank' field.
   * @param value the value to set.
   */
  public void setTank(int value) {
    this.tank = value;
  }

  /**
   * Creates a new WebTarget RecordBuilder.
   * @return A new WebTarget RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder();
  }

  /**
   * Creates a new WebTarget RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebTarget RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder(other);
    }
  }

  /**
   * Creates a new WebTarget RecordBuilder by copying an existing WebTarget instance.
   * @param other The existing instance to copy.
   * @return A new WebTarget RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTarget other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebTarget instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebTarget>
    implements org.apache.avro.data.RecordBuilder<WebTarget> {

    private long active_ms;
    private double actual;
    private int aircraft;
    private java.lang.CharSequence alliance;
    private int alliance_id;
    private double avg_infra;
    private int beige_turns;
    private link.locutus.discord.apiv1.enums.NationColor color;
    private int def;
    private double expected;
    private int id;
    private int missile;
    private java.lang.CharSequence nation;
    private int nuke;
    private int off;
    private int position;
    private double score;
    private int ship;
    private int soldier;
    private int spies;
    private double strength;
    private int tank;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.active_ms)) {
        this.active_ms = data().deepCopy(fields()[0].schema(), other.active_ms);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.actual)) {
        this.actual = data().deepCopy(fields()[1].schema(), other.actual);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.aircraft)) {
        this.aircraft = data().deepCopy(fields()[2].schema(), other.aircraft);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.alliance)) {
        this.alliance = data().deepCopy(fields()[3].schema(), other.alliance);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.alliance_id)) {
        this.alliance_id = data().deepCopy(fields()[4].schema(), other.alliance_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.avg_infra)) {
        this.avg_infra = data().deepCopy(fields()[5].schema(), other.avg_infra);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.beige_turns)) {
        this.beige_turns = data().deepCopy(fields()[6].schema(), other.beige_turns);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.color)) {
        this.color = data().deepCopy(fields()[7].schema(), other.color);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.def)) {
        this.def = data().deepCopy(fields()[8].schema(), other.def);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.expected)) {
        this.expected = data().deepCopy(fields()[9].schema(), other.expected);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.id)) {
        this.id = data().deepCopy(fields()[10].schema(), other.id);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.missile)) {
        this.missile = data().deepCopy(fields()[11].schema(), other.missile);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.nation)) {
        this.nation = data().deepCopy(fields()[12].schema(), other.nation);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.nuke)) {
        this.nuke = data().deepCopy(fields()[13].schema(), other.nuke);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.off)) {
        this.off = data().deepCopy(fields()[14].schema(), other.off);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.position)) {
        this.position = data().deepCopy(fields()[15].schema(), other.position);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.score)) {
        this.score = data().deepCopy(fields()[16].schema(), other.score);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.ship)) {
        this.ship = data().deepCopy(fields()[17].schema(), other.ship);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.soldier)) {
        this.soldier = data().deepCopy(fields()[18].schema(), other.soldier);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.spies)) {
        this.spies = data().deepCopy(fields()[19].schema(), other.spies);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.strength)) {
        this.strength = data().deepCopy(fields()[20].schema(), other.strength);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.tank)) {
        this.tank = data().deepCopy(fields()[21].schema(), other.tank);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
    }

    /**
     * Creates a Builder by copying an existing WebTarget instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTarget other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.active_ms)) {
        this.active_ms = data().deepCopy(fields()[0].schema(), other.active_ms);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.actual)) {
        this.actual = data().deepCopy(fields()[1].schema(), other.actual);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aircraft)) {
        this.aircraft = data().deepCopy(fields()[2].schema(), other.aircraft);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alliance)) {
        this.alliance = data().deepCopy(fields()[3].schema(), other.alliance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alliance_id)) {
        this.alliance_id = data().deepCopy(fields()[4].schema(), other.alliance_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.avg_infra)) {
        this.avg_infra = data().deepCopy(fields()[5].schema(), other.avg_infra);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.beige_turns)) {
        this.beige_turns = data().deepCopy(fields()[6].schema(), other.beige_turns);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.color)) {
        this.color = data().deepCopy(fields()[7].schema(), other.color);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.def)) {
        this.def = data().deepCopy(fields()[8].schema(), other.def);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.expected)) {
        this.expected = data().deepCopy(fields()[9].schema(), other.expected);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.id)) {
        this.id = data().deepCopy(fields()[10].schema(), other.id);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.missile)) {
        this.missile = data().deepCopy(fields()[11].schema(), other.missile);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.nation)) {
        this.nation = data().deepCopy(fields()[12].schema(), other.nation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.nuke)) {
        this.nuke = data().deepCopy(fields()[13].schema(), other.nuke);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.off)) {
        this.off = data().deepCopy(fields()[14].schema(), other.off);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.position)) {
        this.position = data().deepCopy(fields()[15].schema(), other.position);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.score)) {
        this.score = data().deepCopy(fields()[16].schema(), other.score);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.ship)) {
        this.ship = data().deepCopy(fields()[17].schema(), other.ship);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.soldier)) {
        this.soldier = data().deepCopy(fields()[18].schema(), other.soldier);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.spies)) {
        this.spies = data().deepCopy(fields()[19].schema(), other.spies);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.strength)) {
        this.strength = data().deepCopy(fields()[20].schema(), other.strength);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.tank)) {
        this.tank = data().deepCopy(fields()[21].schema(), other.tank);
        fieldSetFlags()[21] = true;
      }
    }

    /**
      * Gets the value of the 'active_ms' field.
      * @return The value.
      */
    public long getActiveMs() {
      return active_ms;
    }


    /**
      * Sets the value of the 'active_ms' field.
      * @param value The value of 'active_ms'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setActiveMs(long value) {
      validate(fields()[0], value);
      this.active_ms = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'active_ms' field has been set.
      * @return True if the 'active_ms' field has been set, false otherwise.
      */
    public boolean hasActiveMs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'active_ms' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearActiveMs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'actual' field.
      * @return The value.
      */
    public double getActual() {
      return actual;
    }


    /**
      * Sets the value of the 'actual' field.
      * @param value The value of 'actual'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setActual(double value) {
      validate(fields()[1], value);
      this.actual = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'actual' field has been set.
      * @return True if the 'actual' field has been set, false otherwise.
      */
    public boolean hasActual() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'actual' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearActual() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'aircraft' field.
      * @return The value.
      */
    public int getAircraft() {
      return aircraft;
    }


    /**
      * Sets the value of the 'aircraft' field.
      * @param value The value of 'aircraft'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setAircraft(int value) {
      validate(fields()[2], value);
      this.aircraft = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'aircraft' field has been set.
      * @return True if the 'aircraft' field has been set, false otherwise.
      */
    public boolean hasAircraft() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'aircraft' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearAircraft() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'alliance' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlliance() {
      return alliance;
    }


    /**
      * Sets the value of the 'alliance' field.
      * @param value The value of 'alliance'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setAlliance(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.alliance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'alliance' field has been set.
      * @return True if the 'alliance' field has been set, false otherwise.
      */
    public boolean hasAlliance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'alliance' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearAlliance() {
      alliance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'alliance_id' field.
      * @return The value.
      */
    public int getAllianceId() {
      return alliance_id;
    }


    /**
      * Sets the value of the 'alliance_id' field.
      * @param value The value of 'alliance_id'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setAllianceId(int value) {
      validate(fields()[4], value);
      this.alliance_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'alliance_id' field has been set.
      * @return True if the 'alliance_id' field has been set, false otherwise.
      */
    public boolean hasAllianceId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'alliance_id' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearAllianceId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_infra' field.
      * @return The value.
      */
    public double getAvgInfra() {
      return avg_infra;
    }


    /**
      * Sets the value of the 'avg_infra' field.
      * @param value The value of 'avg_infra'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setAvgInfra(double value) {
      validate(fields()[5], value);
      this.avg_infra = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_infra' field has been set.
      * @return True if the 'avg_infra' field has been set, false otherwise.
      */
    public boolean hasAvgInfra() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'avg_infra' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearAvgInfra() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'beige_turns' field.
      * @return The value.
      */
    public int getBeigeTurns() {
      return beige_turns;
    }


    /**
      * Sets the value of the 'beige_turns' field.
      * @param value The value of 'beige_turns'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setBeigeTurns(int value) {
      validate(fields()[6], value);
      this.beige_turns = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'beige_turns' field has been set.
      * @return True if the 'beige_turns' field has been set, false otherwise.
      */
    public boolean hasBeigeTurns() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'beige_turns' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearBeigeTurns() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'color' field.
      * @return The value.
      */
    public link.locutus.discord.apiv1.enums.NationColor getColor() {
      return color;
    }


    /**
      * Sets the value of the 'color' field.
      * @param value The value of 'color'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setColor(link.locutus.discord.apiv1.enums.NationColor value) {
      validate(fields()[7], value);
      this.color = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'color' field has been set.
      * @return True if the 'color' field has been set, false otherwise.
      */
    public boolean hasColor() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'color' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearColor() {
      color = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'def' field.
      * @return The value.
      */
    public int getDef() {
      return def;
    }


    /**
      * Sets the value of the 'def' field.
      * @param value The value of 'def'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setDef(int value) {
      validate(fields()[8], value);
      this.def = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'def' field has been set.
      * @return True if the 'def' field has been set, false otherwise.
      */
    public boolean hasDef() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'def' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearDef() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'expected' field.
      * @return The value.
      */
    public double getExpected() {
      return expected;
    }


    /**
      * Sets the value of the 'expected' field.
      * @param value The value of 'expected'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setExpected(double value) {
      validate(fields()[9], value);
      this.expected = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'expected' field has been set.
      * @return True if the 'expected' field has been set, false otherwise.
      */
    public boolean hasExpected() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'expected' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearExpected() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setId(int value) {
      validate(fields()[10], value);
      this.id = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearId() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'missile' field.
      * @return The value.
      */
    public int getMissile() {
      return missile;
    }


    /**
      * Sets the value of the 'missile' field.
      * @param value The value of 'missile'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setMissile(int value) {
      validate(fields()[11], value);
      this.missile = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'missile' field has been set.
      * @return True if the 'missile' field has been set, false otherwise.
      */
    public boolean hasMissile() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'missile' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearMissile() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'nation' field.
      * @return The value.
      */
    public java.lang.CharSequence getNation() {
      return nation;
    }


    /**
      * Sets the value of the 'nation' field.
      * @param value The value of 'nation'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setNation(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.nation = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'nation' field has been set.
      * @return True if the 'nation' field has been set, false otherwise.
      */
    public boolean hasNation() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'nation' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearNation() {
      nation = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'nuke' field.
      * @return The value.
      */
    public int getNuke() {
      return nuke;
    }


    /**
      * Sets the value of the 'nuke' field.
      * @param value The value of 'nuke'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setNuke(int value) {
      validate(fields()[13], value);
      this.nuke = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'nuke' field has been set.
      * @return True if the 'nuke' field has been set, false otherwise.
      */
    public boolean hasNuke() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'nuke' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearNuke() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'off' field.
      * @return The value.
      */
    public int getOff() {
      return off;
    }


    /**
      * Sets the value of the 'off' field.
      * @param value The value of 'off'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setOff(int value) {
      validate(fields()[14], value);
      this.off = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'off' field has been set.
      * @return True if the 'off' field has been set, false otherwise.
      */
    public boolean hasOff() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'off' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearOff() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public int getPosition() {
      return position;
    }


    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setPosition(int value) {
      validate(fields()[15], value);
      this.position = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearPosition() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'score' field.
      * @return The value.
      */
    public double getScore() {
      return score;
    }


    /**
      * Sets the value of the 'score' field.
      * @param value The value of 'score'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setScore(double value) {
      validate(fields()[16], value);
      this.score = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'score' field has been set.
      * @return True if the 'score' field has been set, false otherwise.
      */
    public boolean hasScore() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'score' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearScore() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'ship' field.
      * @return The value.
      */
    public int getShip() {
      return ship;
    }


    /**
      * Sets the value of the 'ship' field.
      * @param value The value of 'ship'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setShip(int value) {
      validate(fields()[17], value);
      this.ship = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'ship' field has been set.
      * @return True if the 'ship' field has been set, false otherwise.
      */
    public boolean hasShip() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'ship' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearShip() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'soldier' field.
      * @return The value.
      */
    public int getSoldier() {
      return soldier;
    }


    /**
      * Sets the value of the 'soldier' field.
      * @param value The value of 'soldier'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setSoldier(int value) {
      validate(fields()[18], value);
      this.soldier = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'soldier' field has been set.
      * @return True if the 'soldier' field has been set, false otherwise.
      */
    public boolean hasSoldier() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'soldier' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearSoldier() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'spies' field.
      * @return The value.
      */
    public int getSpies() {
      return spies;
    }


    /**
      * Sets the value of the 'spies' field.
      * @param value The value of 'spies'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setSpies(int value) {
      validate(fields()[19], value);
      this.spies = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'spies' field has been set.
      * @return True if the 'spies' field has been set, false otherwise.
      */
    public boolean hasSpies() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'spies' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearSpies() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'strength' field.
      * @return The value.
      */
    public double getStrength() {
      return strength;
    }


    /**
      * Sets the value of the 'strength' field.
      * @param value The value of 'strength'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setStrength(double value) {
      validate(fields()[20], value);
      this.strength = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'strength' field has been set.
      * @return True if the 'strength' field has been set, false otherwise.
      */
    public boolean hasStrength() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'strength' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearStrength() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'tank' field.
      * @return The value.
      */
    public int getTank() {
      return tank;
    }


    /**
      * Sets the value of the 'tank' field.
      * @param value The value of 'tank'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder setTank(int value) {
      validate(fields()[21], value);
      this.tank = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'tank' field has been set.
      * @return True if the 'tank' field has been set, false otherwise.
      */
    public boolean hasTank() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'tank' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTarget.Builder clearTank() {
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebTarget build() {
      try {
        WebTarget record = new WebTarget();
        record.active_ms = fieldSetFlags()[0] ? this.active_ms : (java.lang.Long) defaultValue(fields()[0]);
        record.actual = fieldSetFlags()[1] ? this.actual : (java.lang.Double) defaultValue(fields()[1]);
        record.aircraft = fieldSetFlags()[2] ? this.aircraft : (java.lang.Integer) defaultValue(fields()[2]);
        record.alliance = fieldSetFlags()[3] ? this.alliance : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.alliance_id = fieldSetFlags()[4] ? this.alliance_id : (java.lang.Integer) defaultValue(fields()[4]);
        record.avg_infra = fieldSetFlags()[5] ? this.avg_infra : (java.lang.Double) defaultValue(fields()[5]);
        record.beige_turns = fieldSetFlags()[6] ? this.beige_turns : (java.lang.Integer) defaultValue(fields()[6]);
        record.color = fieldSetFlags()[7] ? this.color : (link.locutus.discord.apiv1.enums.NationColor) defaultValue(fields()[7]);
        record.def = fieldSetFlags()[8] ? this.def : (java.lang.Integer) defaultValue(fields()[8]);
        record.expected = fieldSetFlags()[9] ? this.expected : (java.lang.Double) defaultValue(fields()[9]);
        record.id = fieldSetFlags()[10] ? this.id : (java.lang.Integer) defaultValue(fields()[10]);
        record.missile = fieldSetFlags()[11] ? this.missile : (java.lang.Integer) defaultValue(fields()[11]);
        record.nation = fieldSetFlags()[12] ? this.nation : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.nuke = fieldSetFlags()[13] ? this.nuke : (java.lang.Integer) defaultValue(fields()[13]);
        record.off = fieldSetFlags()[14] ? this.off : (java.lang.Integer) defaultValue(fields()[14]);
        record.position = fieldSetFlags()[15] ? this.position : (java.lang.Integer) defaultValue(fields()[15]);
        record.score = fieldSetFlags()[16] ? this.score : (java.lang.Double) defaultValue(fields()[16]);
        record.ship = fieldSetFlags()[17] ? this.ship : (java.lang.Integer) defaultValue(fields()[17]);
        record.soldier = fieldSetFlags()[18] ? this.soldier : (java.lang.Integer) defaultValue(fields()[18]);
        record.spies = fieldSetFlags()[19] ? this.spies : (java.lang.Integer) defaultValue(fields()[19]);
        record.strength = fieldSetFlags()[20] ? this.strength : (java.lang.Double) defaultValue(fields()[20]);
        record.tank = fieldSetFlags()[21] ? this.tank : (java.lang.Integer) defaultValue(fields()[21]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebTarget>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebTarget>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebTarget>
    READER$ = (org.apache.avro.io.DatumReader<WebTarget>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.active_ms);

    out.writeDouble(this.actual);

    out.writeInt(this.aircraft);

    out.writeString(this.alliance);

    out.writeInt(this.alliance_id);

    out.writeDouble(this.avg_infra);

    out.writeInt(this.beige_turns);

    out.writeEnum(this.color.ordinal());

    out.writeInt(this.def);

    out.writeDouble(this.expected);

    out.writeInt(this.id);

    out.writeInt(this.missile);

    out.writeString(this.nation);

    out.writeInt(this.nuke);

    out.writeInt(this.off);

    out.writeInt(this.position);

    out.writeDouble(this.score);

    out.writeInt(this.ship);

    out.writeInt(this.soldier);

    out.writeInt(this.spies);

    out.writeDouble(this.strength);

    out.writeInt(this.tank);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.active_ms = in.readLong();

      this.actual = in.readDouble();

      this.aircraft = in.readInt();

      this.alliance = in.readString(this.alliance instanceof Utf8 ? (Utf8)this.alliance : null);

      this.alliance_id = in.readInt();

      this.avg_infra = in.readDouble();

      this.beige_turns = in.readInt();

      this.color = link.locutus.discord.apiv1.enums.NationColor.values()[in.readEnum()];

      this.def = in.readInt();

      this.expected = in.readDouble();

      this.id = in.readInt();

      this.missile = in.readInt();

      this.nation = in.readString(this.nation instanceof Utf8 ? (Utf8)this.nation : null);

      this.nuke = in.readInt();

      this.off = in.readInt();

      this.position = in.readInt();

      this.score = in.readDouble();

      this.ship = in.readInt();

      this.soldier = in.readInt();

      this.spies = in.readInt();

      this.strength = in.readDouble();

      this.tank = in.readInt();

    } else {
      for (int i = 0; i < 22; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.active_ms = in.readLong();
          break;

        case 1:
          this.actual = in.readDouble();
          break;

        case 2:
          this.aircraft = in.readInt();
          break;

        case 3:
          this.alliance = in.readString(this.alliance instanceof Utf8 ? (Utf8)this.alliance : null);
          break;

        case 4:
          this.alliance_id = in.readInt();
          break;

        case 5:
          this.avg_infra = in.readDouble();
          break;

        case 6:
          this.beige_turns = in.readInt();
          break;

        case 7:
          this.color = link.locutus.discord.apiv1.enums.NationColor.values()[in.readEnum()];
          break;

        case 8:
          this.def = in.readInt();
          break;

        case 9:
          this.expected = in.readDouble();
          break;

        case 10:
          this.id = in.readInt();
          break;

        case 11:
          this.missile = in.readInt();
          break;

        case 12:
          this.nation = in.readString(this.nation instanceof Utf8 ? (Utf8)this.nation : null);
          break;

        case 13:
          this.nuke = in.readInt();
          break;

        case 14:
          this.off = in.readInt();
          break;

        case 15:
          this.position = in.readInt();
          break;

        case 16:
          this.score = in.readDouble();
          break;

        case 17:
          this.ship = in.readInt();
          break;

        case 18:
          this.soldier = in.readInt();
          break;

        case 19:
          this.spies = in.readInt();
          break;

        case 20:
          this.strength = in.readDouble();
          break;

        case 21:
          this.tank = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










