/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebOptions extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8529177013774909924L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebOptions\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"color\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"icon\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"key_numeric\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"java-class\":\"java.util.List\"}},{\"name\":\"key_string\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"subtext\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"text\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebOptions> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebOptions> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebOptions> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebOptions> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebOptions> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebOptions to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebOptions from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebOptions instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebOptions fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.CharSequence> color;
  private java.util.List<java.lang.CharSequence> icon;
  private java.util.List<java.lang.Integer> key_numeric;
  private java.util.List<java.lang.CharSequence> key_string;
  private java.util.List<java.lang.CharSequence> subtext;
  private java.util.List<java.lang.CharSequence> text;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebOptions() {}

  /**
   * All-args constructor.
   * @param color The new value for color
   * @param icon The new value for icon
   * @param key_numeric The new value for key_numeric
   * @param key_string The new value for key_string
   * @param subtext The new value for subtext
   * @param text The new value for text
   */
  public WebOptions(java.util.List<java.lang.CharSequence> color, java.util.List<java.lang.CharSequence> icon, java.util.List<java.lang.Integer> key_numeric, java.util.List<java.lang.CharSequence> key_string, java.util.List<java.lang.CharSequence> subtext, java.util.List<java.lang.CharSequence> text) {
    this.color = color;
    this.icon = icon;
    this.key_numeric = key_numeric;
    this.key_string = key_string;
    this.subtext = subtext;
    this.text = text;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return color;
    case 1: return icon;
    case 2: return key_numeric;
    case 3: return key_string;
    case 4: return subtext;
    case 5: return text;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: color = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: icon = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: key_numeric = (java.util.List<java.lang.Integer>)value$; break;
    case 3: key_string = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: subtext = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: text = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'color' field.
   * @return The value of the 'color' field.
   */
  public java.util.List<java.lang.CharSequence> getColor() {
    return color;
  }


  /**
   * Sets the value of the 'color' field.
   * @param value the value to set.
   */
  public void setColor(java.util.List<java.lang.CharSequence> value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'icon' field.
   * @return The value of the 'icon' field.
   */
  public java.util.List<java.lang.CharSequence> getIcon() {
    return icon;
  }


  /**
   * Sets the value of the 'icon' field.
   * @param value the value to set.
   */
  public void setIcon(java.util.List<java.lang.CharSequence> value) {
    this.icon = value;
  }

  /**
   * Gets the value of the 'key_numeric' field.
   * @return The value of the 'key_numeric' field.
   */
  public java.util.List<java.lang.Integer> getKeyNumeric() {
    return key_numeric;
  }


  /**
   * Sets the value of the 'key_numeric' field.
   * @param value the value to set.
   */
  public void setKeyNumeric(java.util.List<java.lang.Integer> value) {
    this.key_numeric = value;
  }

  /**
   * Gets the value of the 'key_string' field.
   * @return The value of the 'key_string' field.
   */
  public java.util.List<java.lang.CharSequence> getKeyString() {
    return key_string;
  }


  /**
   * Sets the value of the 'key_string' field.
   * @param value the value to set.
   */
  public void setKeyString(java.util.List<java.lang.CharSequence> value) {
    this.key_string = value;
  }

  /**
   * Gets the value of the 'subtext' field.
   * @return The value of the 'subtext' field.
   */
  public java.util.List<java.lang.CharSequence> getSubtext() {
    return subtext;
  }


  /**
   * Sets the value of the 'subtext' field.
   * @param value the value to set.
   */
  public void setSubtext(java.util.List<java.lang.CharSequence> value) {
    this.subtext = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.util.List<java.lang.CharSequence> getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.util.List<java.lang.CharSequence> value) {
    this.text = value;
  }

  /**
   * Creates a new WebOptions RecordBuilder.
   * @return A new WebOptions RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder();
  }

  /**
   * Creates a new WebOptions RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebOptions RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder(other);
    }
  }

  /**
   * Creates a new WebOptions RecordBuilder by copying an existing WebOptions instance.
   * @param other The existing instance to copy.
   * @return A new WebOptions RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebOptions other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebOptions instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebOptions>
    implements org.apache.avro.data.RecordBuilder<WebOptions> {

    private java.util.List<java.lang.CharSequence> color;
    private java.util.List<java.lang.CharSequence> icon;
    private java.util.List<java.lang.Integer> key_numeric;
    private java.util.List<java.lang.CharSequence> key_string;
    private java.util.List<java.lang.CharSequence> subtext;
    private java.util.List<java.lang.CharSequence> text;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.color)) {
        this.color = data().deepCopy(fields()[0].schema(), other.color);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.icon)) {
        this.icon = data().deepCopy(fields()[1].schema(), other.icon);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.key_numeric)) {
        this.key_numeric = data().deepCopy(fields()[2].schema(), other.key_numeric);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.key_string)) {
        this.key_string = data().deepCopy(fields()[3].schema(), other.key_string);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.subtext)) {
        this.subtext = data().deepCopy(fields()[4].schema(), other.subtext);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.text)) {
        this.text = data().deepCopy(fields()[5].schema(), other.text);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing WebOptions instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebOptions other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.color)) {
        this.color = data().deepCopy(fields()[0].schema(), other.color);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.icon)) {
        this.icon = data().deepCopy(fields()[1].schema(), other.icon);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key_numeric)) {
        this.key_numeric = data().deepCopy(fields()[2].schema(), other.key_numeric);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.key_string)) {
        this.key_string = data().deepCopy(fields()[3].schema(), other.key_string);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subtext)) {
        this.subtext = data().deepCopy(fields()[4].schema(), other.subtext);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.text)) {
        this.text = data().deepCopy(fields()[5].schema(), other.text);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'color' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getColor() {
      return color;
    }


    /**
      * Sets the value of the 'color' field.
      * @param value The value of 'color'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setColor(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.color = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'color' field has been set.
      * @return True if the 'color' field has been set, false otherwise.
      */
    public boolean hasColor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'color' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearColor() {
      color = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'icon' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getIcon() {
      return icon;
    }


    /**
      * Sets the value of the 'icon' field.
      * @param value The value of 'icon'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setIcon(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.icon = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'icon' field has been set.
      * @return True if the 'icon' field has been set, false otherwise.
      */
    public boolean hasIcon() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'icon' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearIcon() {
      icon = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key_numeric' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getKeyNumeric() {
      return key_numeric;
    }


    /**
      * Sets the value of the 'key_numeric' field.
      * @param value The value of 'key_numeric'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setKeyNumeric(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.key_numeric = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key_numeric' field has been set.
      * @return True if the 'key_numeric' field has been set, false otherwise.
      */
    public boolean hasKeyNumeric() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key_numeric' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearKeyNumeric() {
      key_numeric = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'key_string' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getKeyString() {
      return key_string;
    }


    /**
      * Sets the value of the 'key_string' field.
      * @param value The value of 'key_string'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setKeyString(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.key_string = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'key_string' field has been set.
      * @return True if the 'key_string' field has been set, false otherwise.
      */
    public boolean hasKeyString() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'key_string' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearKeyString() {
      key_string = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subtext' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSubtext() {
      return subtext;
    }


    /**
      * Sets the value of the 'subtext' field.
      * @param value The value of 'subtext'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setSubtext(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.subtext = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subtext' field has been set.
      * @return True if the 'subtext' field has been set, false otherwise.
      */
    public boolean hasSubtext() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subtext' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearSubtext() {
      subtext = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder setText(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.text = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebOptions.Builder clearText() {
      text = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebOptions build() {
      try {
        WebOptions record = new WebOptions();
        record.color = fieldSetFlags()[0] ? this.color : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.icon = fieldSetFlags()[1] ? this.icon : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.key_numeric = fieldSetFlags()[2] ? this.key_numeric : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        record.key_string = fieldSetFlags()[3] ? this.key_string : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.subtext = fieldSetFlags()[4] ? this.subtext : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.text = fieldSetFlags()[5] ? this.text : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebOptions>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebOptions>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebOptions>
    READER$ = (org.apache.avro.io.DatumReader<WebOptions>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.color.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.color) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.icon.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.icon) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.key_numeric.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.Integer e2: this.key_numeric) {
      actualSize2++;
      out.startItem();
      out.writeInt(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.key_string.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.CharSequence e3: this.key_string) {
      actualSize3++;
      out.startItem();
      out.writeString(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.subtext.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.lang.CharSequence e4: this.subtext) {
      actualSize4++;
      out.startItem();
      out.writeString(e4);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.text.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (java.lang.CharSequence e5: this.text) {
      actualSize5++;
      out.startItem();
      out.writeString(e5);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.color;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("color").schema());
        this.color = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.icon;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("icon").schema());
        this.icon = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.Integer> a2 = this.key_numeric;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("key_numeric").schema());
        this.key_numeric = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readInt();
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a3 = this.key_string;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.CharSequence>((int)size3, SCHEMA$.getField("key_string").schema());
        this.key_string = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.CharSequence> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.CharSequence e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readString(e3 instanceof Utf8 ? (Utf8)e3 : null);
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a4 = this.subtext;
      if (a4 == null) {
        a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("subtext").schema());
        this.subtext = a4;
      } else a4.clear();
      SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
          e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a5 = this.text;
      if (a5 == null) {
        a5 = new SpecificData.Array<java.lang.CharSequence>((int)size5, SCHEMA$.getField("text").schema());
        this.text = a5;
      } else a5.clear();
      SpecificData.Array<java.lang.CharSequence> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          java.lang.CharSequence e5 = (ga5 != null ? ga5.peek() : null);
          e5 = in.readString(e5 instanceof Utf8 ? (Utf8)e5 : null);
          a5.add(e5);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.color;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("color").schema());
            this.color = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.icon;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("icon").schema());
            this.icon = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Integer> a2 = this.key_numeric;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Integer>((int)size2, SCHEMA$.getField("key_numeric").schema());
            this.key_numeric = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Integer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Integer e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readInt();
              a2.add(e2);
            }
          }
          break;

        case 3:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a3 = this.key_string;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.CharSequence>((int)size3, SCHEMA$.getField("key_string").schema());
            this.key_string = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.CharSequence> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.CharSequence e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readString(e3 instanceof Utf8 ? (Utf8)e3 : null);
              a3.add(e3);
            }
          }
          break;

        case 4:
          long size4 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a4 = this.subtext;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("subtext").schema());
            this.subtext = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
              a4.add(e4);
            }
          }
          break;

        case 5:
          long size5 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a5 = this.text;
          if (a5 == null) {
            a5 = new SpecificData.Array<java.lang.CharSequence>((int)size5, SCHEMA$.getField("text").schema());
            this.text = a5;
          } else a5.clear();
          SpecificData.Array<java.lang.CharSequence> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              java.lang.CharSequence e5 = (ga5 != null ? ga5.peek() : null);
              e5 = in.readString(e5 instanceof Utf8 ? (Utf8)e5 : null);
              a5.add(e5);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










