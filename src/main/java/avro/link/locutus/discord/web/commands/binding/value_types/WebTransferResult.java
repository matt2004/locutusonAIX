/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebTransferResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3760207211215751643L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebTransferResult\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"amount\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"java-class\":\"[D\"}},{\"name\":\"messages\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"note\",\"type\":\"string\"},{\"name\":\"receiver_id\",\"type\":\"int\"},{\"name\":\"receiver_is_aa\",\"type\":\"boolean\"},{\"name\":\"receiver_name\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"status_msg\",\"type\":\"string\"},{\"name\":\"status_success\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebTransferResult> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebTransferResult> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebTransferResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebTransferResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebTransferResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebTransferResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebTransferResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebTransferResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebTransferResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.Double> amount;
  private java.util.List<java.lang.CharSequence> messages;
  private java.lang.CharSequence note;
  private int receiver_id;
  private boolean receiver_is_aa;
  private java.lang.CharSequence receiver_name;
  private java.lang.CharSequence status;
  private java.lang.CharSequence status_msg;
  private boolean status_success;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebTransferResult() {}

  /**
   * All-args constructor.
   * @param amount The new value for amount
   * @param messages The new value for messages
   * @param note The new value for note
   * @param receiver_id The new value for receiver_id
   * @param receiver_is_aa The new value for receiver_is_aa
   * @param receiver_name The new value for receiver_name
   * @param status The new value for status
   * @param status_msg The new value for status_msg
   * @param status_success The new value for status_success
   */
  public WebTransferResult(java.util.List<java.lang.Double> amount, java.util.List<java.lang.CharSequence> messages, java.lang.CharSequence note, java.lang.Integer receiver_id, java.lang.Boolean receiver_is_aa, java.lang.CharSequence receiver_name, java.lang.CharSequence status, java.lang.CharSequence status_msg, java.lang.Boolean status_success) {
    this.amount = amount;
    this.messages = messages;
    this.note = note;
    this.receiver_id = receiver_id;
    this.receiver_is_aa = receiver_is_aa;
    this.receiver_name = receiver_name;
    this.status = status;
    this.status_msg = status_msg;
    this.status_success = status_success;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return amount;
    case 1: return messages;
    case 2: return note;
    case 3: return receiver_id;
    case 4: return receiver_is_aa;
    case 5: return receiver_name;
    case 6: return status;
    case 7: return status_msg;
    case 8: return status_success;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: amount = (java.util.List<java.lang.Double>)value$; break;
    case 1: messages = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: note = (java.lang.CharSequence)value$; break;
    case 3: receiver_id = (java.lang.Integer)value$; break;
    case 4: receiver_is_aa = (java.lang.Boolean)value$; break;
    case 5: receiver_name = (java.lang.CharSequence)value$; break;
    case 6: status = (java.lang.CharSequence)value$; break;
    case 7: status_msg = (java.lang.CharSequence)value$; break;
    case 8: status_success = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.util.List<java.lang.Double> getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.util.List<java.lang.Double> value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'messages' field.
   * @return The value of the 'messages' field.
   */
  public java.util.List<java.lang.CharSequence> getMessages() {
    return messages;
  }


  /**
   * Sets the value of the 'messages' field.
   * @param value the value to set.
   */
  public void setMessages(java.util.List<java.lang.CharSequence> value) {
    this.messages = value;
  }

  /**
   * Gets the value of the 'note' field.
   * @return The value of the 'note' field.
   */
  public java.lang.CharSequence getNote() {
    return note;
  }


  /**
   * Sets the value of the 'note' field.
   * @param value the value to set.
   */
  public void setNote(java.lang.CharSequence value) {
    this.note = value;
  }

  /**
   * Gets the value of the 'receiver_id' field.
   * @return The value of the 'receiver_id' field.
   */
  public int getReceiverId() {
    return receiver_id;
  }


  /**
   * Sets the value of the 'receiver_id' field.
   * @param value the value to set.
   */
  public void setReceiverId(int value) {
    this.receiver_id = value;
  }

  /**
   * Gets the value of the 'receiver_is_aa' field.
   * @return The value of the 'receiver_is_aa' field.
   */
  public boolean getReceiverIsAa() {
    return receiver_is_aa;
  }


  /**
   * Sets the value of the 'receiver_is_aa' field.
   * @param value the value to set.
   */
  public void setReceiverIsAa(boolean value) {
    this.receiver_is_aa = value;
  }

  /**
   * Gets the value of the 'receiver_name' field.
   * @return The value of the 'receiver_name' field.
   */
  public java.lang.CharSequence getReceiverName() {
    return receiver_name;
  }


  /**
   * Sets the value of the 'receiver_name' field.
   * @param value the value to set.
   */
  public void setReceiverName(java.lang.CharSequence value) {
    this.receiver_name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'status_msg' field.
   * @return The value of the 'status_msg' field.
   */
  public java.lang.CharSequence getStatusMsg() {
    return status_msg;
  }


  /**
   * Sets the value of the 'status_msg' field.
   * @param value the value to set.
   */
  public void setStatusMsg(java.lang.CharSequence value) {
    this.status_msg = value;
  }

  /**
   * Gets the value of the 'status_success' field.
   * @return The value of the 'status_success' field.
   */
  public boolean getStatusSuccess() {
    return status_success;
  }


  /**
   * Sets the value of the 'status_success' field.
   * @param value the value to set.
   */
  public void setStatusSuccess(boolean value) {
    this.status_success = value;
  }

  /**
   * Creates a new WebTransferResult RecordBuilder.
   * @return A new WebTransferResult RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder();
  }

  /**
   * Creates a new WebTransferResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebTransferResult RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder(other);
    }
  }

  /**
   * Creates a new WebTransferResult RecordBuilder by copying an existing WebTransferResult instance.
   * @param other The existing instance to copy.
   * @return A new WebTransferResult RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebTransferResult other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebTransferResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebTransferResult>
    implements org.apache.avro.data.RecordBuilder<WebTransferResult> {

    private java.util.List<java.lang.Double> amount;
    private java.util.List<java.lang.CharSequence> messages;
    private java.lang.CharSequence note;
    private int receiver_id;
    private boolean receiver_is_aa;
    private java.lang.CharSequence receiver_name;
    private java.lang.CharSequence status;
    private java.lang.CharSequence status_msg;
    private boolean status_success;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.messages)) {
        this.messages = data().deepCopy(fields()[1].schema(), other.messages);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.note)) {
        this.note = data().deepCopy(fields()[2].schema(), other.note);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.receiver_id)) {
        this.receiver_id = data().deepCopy(fields()[3].schema(), other.receiver_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.receiver_is_aa)) {
        this.receiver_is_aa = data().deepCopy(fields()[4].schema(), other.receiver_is_aa);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.receiver_name)) {
        this.receiver_name = data().deepCopy(fields()[5].schema(), other.receiver_name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status_msg)) {
        this.status_msg = data().deepCopy(fields()[7].schema(), other.status_msg);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.status_success)) {
        this.status_success = data().deepCopy(fields()[8].schema(), other.status_success);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing WebTransferResult instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebTransferResult other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.messages)) {
        this.messages = data().deepCopy(fields()[1].schema(), other.messages);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.note)) {
        this.note = data().deepCopy(fields()[2].schema(), other.note);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.receiver_id)) {
        this.receiver_id = data().deepCopy(fields()[3].schema(), other.receiver_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receiver_is_aa)) {
        this.receiver_is_aa = data().deepCopy(fields()[4].schema(), other.receiver_is_aa);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.receiver_name)) {
        this.receiver_name = data().deepCopy(fields()[5].schema(), other.receiver_name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status_msg)) {
        this.status_msg = data().deepCopy(fields()[7].schema(), other.status_msg);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status_success)) {
        this.status_success = data().deepCopy(fields()[8].schema(), other.status_success);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setAmount(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.amount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'messages' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMessages() {
      return messages;
    }


    /**
      * Sets the value of the 'messages' field.
      * @param value The value of 'messages'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setMessages(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.messages = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'messages' field has been set.
      * @return True if the 'messages' field has been set, false otherwise.
      */
    public boolean hasMessages() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'messages' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearMessages() {
      messages = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'note' field.
      * @return The value.
      */
    public java.lang.CharSequence getNote() {
      return note;
    }


    /**
      * Sets the value of the 'note' field.
      * @param value The value of 'note'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setNote(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.note = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'note' field has been set.
      * @return True if the 'note' field has been set, false otherwise.
      */
    public boolean hasNote() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'note' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearNote() {
      note = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiver_id' field.
      * @return The value.
      */
    public int getReceiverId() {
      return receiver_id;
    }


    /**
      * Sets the value of the 'receiver_id' field.
      * @param value The value of 'receiver_id'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setReceiverId(int value) {
      validate(fields()[3], value);
      this.receiver_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'receiver_id' field has been set.
      * @return True if the 'receiver_id' field has been set, false otherwise.
      */
    public boolean hasReceiverId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'receiver_id' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearReceiverId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiver_is_aa' field.
      * @return The value.
      */
    public boolean getReceiverIsAa() {
      return receiver_is_aa;
    }


    /**
      * Sets the value of the 'receiver_is_aa' field.
      * @param value The value of 'receiver_is_aa'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setReceiverIsAa(boolean value) {
      validate(fields()[4], value);
      this.receiver_is_aa = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'receiver_is_aa' field has been set.
      * @return True if the 'receiver_is_aa' field has been set, false otherwise.
      */
    public boolean hasReceiverIsAa() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'receiver_is_aa' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearReceiverIsAa() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiver_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getReceiverName() {
      return receiver_name;
    }


    /**
      * Sets the value of the 'receiver_name' field.
      * @param value The value of 'receiver_name'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setReceiverName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.receiver_name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'receiver_name' field has been set.
      * @return True if the 'receiver_name' field has been set, false otherwise.
      */
    public boolean hasReceiverName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'receiver_name' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearReceiverName() {
      receiver_name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status_msg' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatusMsg() {
      return status_msg;
    }


    /**
      * Sets the value of the 'status_msg' field.
      * @param value The value of 'status_msg'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setStatusMsg(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.status_msg = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status_msg' field has been set.
      * @return True if the 'status_msg' field has been set, false otherwise.
      */
    public boolean hasStatusMsg() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status_msg' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearStatusMsg() {
      status_msg = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status_success' field.
      * @return The value.
      */
    public boolean getStatusSuccess() {
      return status_success;
    }


    /**
      * Sets the value of the 'status_success' field.
      * @param value The value of 'status_success'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder setStatusSuccess(boolean value) {
      validate(fields()[8], value);
      this.status_success = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status_success' field has been set.
      * @return True if the 'status_success' field has been set, false otherwise.
      */
    public boolean hasStatusSuccess() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status_success' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebTransferResult.Builder clearStatusSuccess() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebTransferResult build() {
      try {
        WebTransferResult record = new WebTransferResult();
        record.amount = fieldSetFlags()[0] ? this.amount : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.messages = fieldSetFlags()[1] ? this.messages : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.note = fieldSetFlags()[2] ? this.note : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.receiver_id = fieldSetFlags()[3] ? this.receiver_id : (java.lang.Integer) defaultValue(fields()[3]);
        record.receiver_is_aa = fieldSetFlags()[4] ? this.receiver_is_aa : (java.lang.Boolean) defaultValue(fields()[4]);
        record.receiver_name = fieldSetFlags()[5] ? this.receiver_name : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.status_msg = fieldSetFlags()[7] ? this.status_msg : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.status_success = fieldSetFlags()[8] ? this.status_success : (java.lang.Boolean) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebTransferResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebTransferResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebTransferResult>
    READER$ = (org.apache.avro.io.DatumReader<WebTransferResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.amount.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Double e0: this.amount) {
      actualSize0++;
      out.startItem();
      out.writeDouble(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.messages.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.messages) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    out.writeString(this.note);

    out.writeInt(this.receiver_id);

    out.writeBoolean(this.receiver_is_aa);

    out.writeString(this.receiver_name);

    out.writeString(this.status);

    out.writeString(this.status_msg);

    out.writeBoolean(this.status_success);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.Double> a0 = this.amount;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("amount").schema());
        this.amount = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readDouble();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.messages;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("messages").schema());
        this.messages = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      this.note = in.readString(this.note instanceof Utf8 ? (Utf8)this.note : null);

      this.receiver_id = in.readInt();

      this.receiver_is_aa = in.readBoolean();

      this.receiver_name = in.readString(this.receiver_name instanceof Utf8 ? (Utf8)this.receiver_name : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.status_msg = in.readString(this.status_msg instanceof Utf8 ? (Utf8)this.status_msg : null);

      this.status_success = in.readBoolean();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Double> a0 = this.amount;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("amount").schema());
            this.amount = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readDouble();
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.messages;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("messages").schema());
            this.messages = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 2:
          this.note = in.readString(this.note instanceof Utf8 ? (Utf8)this.note : null);
          break;

        case 3:
          this.receiver_id = in.readInt();
          break;

        case 4:
          this.receiver_is_aa = in.readBoolean();
          break;

        case 5:
          this.receiver_name = in.readString(this.receiver_name instanceof Utf8 ? (Utf8)this.receiver_name : null);
          break;

        case 6:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 7:
          this.status_msg = in.readString(this.status_msg instanceof Utf8 ? (Utf8)this.status_msg : null);
          break;

        case 8:
          this.status_success = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










