/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WebSession extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6015037722158573868L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebSession\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"alliance\",\"type\":\"int\"},{\"name\":\"alliance_name\",\"type\":\"string\"},{\"name\":\"expires\",\"type\":\"long\"},{\"name\":\"guild\",\"type\":\"string\"},{\"name\":\"guild_icon\",\"type\":\"string\"},{\"name\":\"guild_name\",\"type\":\"string\"},{\"name\":\"nation\",\"type\":\"int\"},{\"name\":\"nation_name\",\"type\":\"string\"},{\"name\":\"nation_valid\",\"type\":\"boolean\"},{\"name\":\"registered\",\"type\":\"boolean\"},{\"name\":\"registered_nation\",\"type\":\"int\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"user_icon\",\"type\":\"string\"},{\"name\":\"user_name\",\"type\":\"string\"},{\"name\":\"user_valid\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WebSession> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WebSession> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WebSession> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WebSession> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WebSession> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WebSession to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WebSession from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WebSession instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WebSession fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int alliance;
  private java.lang.CharSequence alliance_name;
  private long expires;
  private java.lang.CharSequence guild;
  private java.lang.CharSequence guild_icon;
  private java.lang.CharSequence guild_name;
  private int nation;
  private java.lang.CharSequence nation_name;
  private boolean nation_valid;
  private boolean registered;
  private int registered_nation;
  private java.lang.CharSequence user;
  private java.lang.CharSequence user_icon;
  private java.lang.CharSequence user_name;
  private boolean user_valid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebSession() {}

  /**
   * All-args constructor.
   * @param alliance The new value for alliance
   * @param alliance_name The new value for alliance_name
   * @param expires The new value for expires
   * @param guild The new value for guild
   * @param guild_icon The new value for guild_icon
   * @param guild_name The new value for guild_name
   * @param nation The new value for nation
   * @param nation_name The new value for nation_name
   * @param nation_valid The new value for nation_valid
   * @param registered The new value for registered
   * @param registered_nation The new value for registered_nation
   * @param user The new value for user
   * @param user_icon The new value for user_icon
   * @param user_name The new value for user_name
   * @param user_valid The new value for user_valid
   */
  public WebSession(java.lang.Integer alliance, java.lang.CharSequence alliance_name, java.lang.Long expires, java.lang.CharSequence guild, java.lang.CharSequence guild_icon, java.lang.CharSequence guild_name, java.lang.Integer nation, java.lang.CharSequence nation_name, java.lang.Boolean nation_valid, java.lang.Boolean registered, java.lang.Integer registered_nation, java.lang.CharSequence user, java.lang.CharSequence user_icon, java.lang.CharSequence user_name, java.lang.Boolean user_valid) {
    this.alliance = alliance;
    this.alliance_name = alliance_name;
    this.expires = expires;
    this.guild = guild;
    this.guild_icon = guild_icon;
    this.guild_name = guild_name;
    this.nation = nation;
    this.nation_name = nation_name;
    this.nation_valid = nation_valid;
    this.registered = registered;
    this.registered_nation = registered_nation;
    this.user = user;
    this.user_icon = user_icon;
    this.user_name = user_name;
    this.user_valid = user_valid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return alliance;
    case 1: return alliance_name;
    case 2: return expires;
    case 3: return guild;
    case 4: return guild_icon;
    case 5: return guild_name;
    case 6: return nation;
    case 7: return nation_name;
    case 8: return nation_valid;
    case 9: return registered;
    case 10: return registered_nation;
    case 11: return user;
    case 12: return user_icon;
    case 13: return user_name;
    case 14: return user_valid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: alliance = (java.lang.Integer)value$; break;
    case 1: alliance_name = (java.lang.CharSequence)value$; break;
    case 2: expires = (java.lang.Long)value$; break;
    case 3: guild = (java.lang.CharSequence)value$; break;
    case 4: guild_icon = (java.lang.CharSequence)value$; break;
    case 5: guild_name = (java.lang.CharSequence)value$; break;
    case 6: nation = (java.lang.Integer)value$; break;
    case 7: nation_name = (java.lang.CharSequence)value$; break;
    case 8: nation_valid = (java.lang.Boolean)value$; break;
    case 9: registered = (java.lang.Boolean)value$; break;
    case 10: registered_nation = (java.lang.Integer)value$; break;
    case 11: user = (java.lang.CharSequence)value$; break;
    case 12: user_icon = (java.lang.CharSequence)value$; break;
    case 13: user_name = (java.lang.CharSequence)value$; break;
    case 14: user_valid = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'alliance' field.
   * @return The value of the 'alliance' field.
   */
  public int getAlliance() {
    return alliance;
  }


  /**
   * Sets the value of the 'alliance' field.
   * @param value the value to set.
   */
  public void setAlliance(int value) {
    this.alliance = value;
  }

  /**
   * Gets the value of the 'alliance_name' field.
   * @return The value of the 'alliance_name' field.
   */
  public java.lang.CharSequence getAllianceName() {
    return alliance_name;
  }


  /**
   * Sets the value of the 'alliance_name' field.
   * @param value the value to set.
   */
  public void setAllianceName(java.lang.CharSequence value) {
    this.alliance_name = value;
  }

  /**
   * Gets the value of the 'expires' field.
   * @return The value of the 'expires' field.
   */
  public long getExpires() {
    return expires;
  }


  /**
   * Sets the value of the 'expires' field.
   * @param value the value to set.
   */
  public void setExpires(long value) {
    this.expires = value;
  }

  /**
   * Gets the value of the 'guild' field.
   * @return The value of the 'guild' field.
   */
  public java.lang.CharSequence getGuild() {
    return guild;
  }


  /**
   * Sets the value of the 'guild' field.
   * @param value the value to set.
   */
  public void setGuild(java.lang.CharSequence value) {
    this.guild = value;
  }

  /**
   * Gets the value of the 'guild_icon' field.
   * @return The value of the 'guild_icon' field.
   */
  public java.lang.CharSequence getGuildIcon() {
    return guild_icon;
  }


  /**
   * Sets the value of the 'guild_icon' field.
   * @param value the value to set.
   */
  public void setGuildIcon(java.lang.CharSequence value) {
    this.guild_icon = value;
  }

  /**
   * Gets the value of the 'guild_name' field.
   * @return The value of the 'guild_name' field.
   */
  public java.lang.CharSequence getGuildName() {
    return guild_name;
  }


  /**
   * Sets the value of the 'guild_name' field.
   * @param value the value to set.
   */
  public void setGuildName(java.lang.CharSequence value) {
    this.guild_name = value;
  }

  /**
   * Gets the value of the 'nation' field.
   * @return The value of the 'nation' field.
   */
  public int getNation() {
    return nation;
  }


  /**
   * Sets the value of the 'nation' field.
   * @param value the value to set.
   */
  public void setNation(int value) {
    this.nation = value;
  }

  /**
   * Gets the value of the 'nation_name' field.
   * @return The value of the 'nation_name' field.
   */
  public java.lang.CharSequence getNationName() {
    return nation_name;
  }


  /**
   * Sets the value of the 'nation_name' field.
   * @param value the value to set.
   */
  public void setNationName(java.lang.CharSequence value) {
    this.nation_name = value;
  }

  /**
   * Gets the value of the 'nation_valid' field.
   * @return The value of the 'nation_valid' field.
   */
  public boolean getNationValid() {
    return nation_valid;
  }


  /**
   * Sets the value of the 'nation_valid' field.
   * @param value the value to set.
   */
  public void setNationValid(boolean value) {
    this.nation_valid = value;
  }

  /**
   * Gets the value of the 'registered' field.
   * @return The value of the 'registered' field.
   */
  public boolean getRegistered() {
    return registered;
  }


  /**
   * Sets the value of the 'registered' field.
   * @param value the value to set.
   */
  public void setRegistered(boolean value) {
    this.registered = value;
  }

  /**
   * Gets the value of the 'registered_nation' field.
   * @return The value of the 'registered_nation' field.
   */
  public int getRegisteredNation() {
    return registered_nation;
  }


  /**
   * Sets the value of the 'registered_nation' field.
   * @param value the value to set.
   */
  public void setRegisteredNation(int value) {
    this.registered_nation = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'user_icon' field.
   * @return The value of the 'user_icon' field.
   */
  public java.lang.CharSequence getUserIcon() {
    return user_icon;
  }


  /**
   * Sets the value of the 'user_icon' field.
   * @param value the value to set.
   */
  public void setUserIcon(java.lang.CharSequence value) {
    this.user_icon = value;
  }

  /**
   * Gets the value of the 'user_name' field.
   * @return The value of the 'user_name' field.
   */
  public java.lang.CharSequence getUserName() {
    return user_name;
  }


  /**
   * Sets the value of the 'user_name' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.user_name = value;
  }

  /**
   * Gets the value of the 'user_valid' field.
   * @return The value of the 'user_valid' field.
   */
  public boolean getUserValid() {
    return user_valid;
  }


  /**
   * Sets the value of the 'user_valid' field.
   * @param value the value to set.
   */
  public void setUserValid(boolean value) {
    this.user_valid = value;
  }

  /**
   * Creates a new WebSession RecordBuilder.
   * @return A new WebSession RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSession.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.WebSession.Builder();
  }

  /**
   * Creates a new WebSession RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebSession RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSession.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebSession.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebSession.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebSession.Builder(other);
    }
  }

  /**
   * Creates a new WebSession RecordBuilder by copying an existing WebSession instance.
   * @param other The existing instance to copy.
   * @return A new WebSession RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.WebSession.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.WebSession other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.WebSession.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.WebSession.Builder(other);
    }
  }

  /**
   * RecordBuilder for WebSession instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebSession>
    implements org.apache.avro.data.RecordBuilder<WebSession> {

    private int alliance;
    private java.lang.CharSequence alliance_name;
    private long expires;
    private java.lang.CharSequence guild;
    private java.lang.CharSequence guild_icon;
    private java.lang.CharSequence guild_name;
    private int nation;
    private java.lang.CharSequence nation_name;
    private boolean nation_valid;
    private boolean registered;
    private int registered_nation;
    private java.lang.CharSequence user;
    private java.lang.CharSequence user_icon;
    private java.lang.CharSequence user_name;
    private boolean user_valid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebSession.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.alliance)) {
        this.alliance = data().deepCopy(fields()[0].schema(), other.alliance);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.alliance_name)) {
        this.alliance_name = data().deepCopy(fields()[1].schema(), other.alliance_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.expires)) {
        this.expires = data().deepCopy(fields()[2].schema(), other.expires);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.guild)) {
        this.guild = data().deepCopy(fields()[3].schema(), other.guild);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.guild_icon)) {
        this.guild_icon = data().deepCopy(fields()[4].schema(), other.guild_icon);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.guild_name)) {
        this.guild_name = data().deepCopy(fields()[5].schema(), other.guild_name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.nation)) {
        this.nation = data().deepCopy(fields()[6].schema(), other.nation);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.nation_name)) {
        this.nation_name = data().deepCopy(fields()[7].schema(), other.nation_name);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.nation_valid)) {
        this.nation_valid = data().deepCopy(fields()[8].schema(), other.nation_valid);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.registered)) {
        this.registered = data().deepCopy(fields()[9].schema(), other.registered);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.registered_nation)) {
        this.registered_nation = data().deepCopy(fields()[10].schema(), other.registered_nation);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.user)) {
        this.user = data().deepCopy(fields()[11].schema(), other.user);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.user_icon)) {
        this.user_icon = data().deepCopy(fields()[12].schema(), other.user_icon);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.user_name)) {
        this.user_name = data().deepCopy(fields()[13].schema(), other.user_name);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.user_valid)) {
        this.user_valid = data().deepCopy(fields()[14].schema(), other.user_valid);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing WebSession instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.WebSession other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.alliance)) {
        this.alliance = data().deepCopy(fields()[0].schema(), other.alliance);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alliance_name)) {
        this.alliance_name = data().deepCopy(fields()[1].schema(), other.alliance_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expires)) {
        this.expires = data().deepCopy(fields()[2].schema(), other.expires);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.guild)) {
        this.guild = data().deepCopy(fields()[3].schema(), other.guild);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.guild_icon)) {
        this.guild_icon = data().deepCopy(fields()[4].schema(), other.guild_icon);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.guild_name)) {
        this.guild_name = data().deepCopy(fields()[5].schema(), other.guild_name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nation)) {
        this.nation = data().deepCopy(fields()[6].schema(), other.nation);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.nation_name)) {
        this.nation_name = data().deepCopy(fields()[7].schema(), other.nation_name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.nation_valid)) {
        this.nation_valid = data().deepCopy(fields()[8].schema(), other.nation_valid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.registered)) {
        this.registered = data().deepCopy(fields()[9].schema(), other.registered);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.registered_nation)) {
        this.registered_nation = data().deepCopy(fields()[10].schema(), other.registered_nation);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.user)) {
        this.user = data().deepCopy(fields()[11].schema(), other.user);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.user_icon)) {
        this.user_icon = data().deepCopy(fields()[12].schema(), other.user_icon);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.user_name)) {
        this.user_name = data().deepCopy(fields()[13].schema(), other.user_name);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.user_valid)) {
        this.user_valid = data().deepCopy(fields()[14].schema(), other.user_valid);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'alliance' field.
      * @return The value.
      */
    public int getAlliance() {
      return alliance;
    }


    /**
      * Sets the value of the 'alliance' field.
      * @param value The value of 'alliance'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setAlliance(int value) {
      validate(fields()[0], value);
      this.alliance = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'alliance' field has been set.
      * @return True if the 'alliance' field has been set, false otherwise.
      */
    public boolean hasAlliance() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'alliance' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearAlliance() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'alliance_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getAllianceName() {
      return alliance_name;
    }


    /**
      * Sets the value of the 'alliance_name' field.
      * @param value The value of 'alliance_name'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setAllianceName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.alliance_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'alliance_name' field has been set.
      * @return True if the 'alliance_name' field has been set, false otherwise.
      */
    public boolean hasAllianceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'alliance_name' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearAllianceName() {
      alliance_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'expires' field.
      * @return The value.
      */
    public long getExpires() {
      return expires;
    }


    /**
      * Sets the value of the 'expires' field.
      * @param value The value of 'expires'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setExpires(long value) {
      validate(fields()[2], value);
      this.expires = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'expires' field has been set.
      * @return True if the 'expires' field has been set, false otherwise.
      */
    public boolean hasExpires() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'expires' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearExpires() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'guild' field.
      * @return The value.
      */
    public java.lang.CharSequence getGuild() {
      return guild;
    }


    /**
      * Sets the value of the 'guild' field.
      * @param value The value of 'guild'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setGuild(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.guild = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'guild' field has been set.
      * @return True if the 'guild' field has been set, false otherwise.
      */
    public boolean hasGuild() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'guild' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearGuild() {
      guild = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'guild_icon' field.
      * @return The value.
      */
    public java.lang.CharSequence getGuildIcon() {
      return guild_icon;
    }


    /**
      * Sets the value of the 'guild_icon' field.
      * @param value The value of 'guild_icon'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setGuildIcon(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.guild_icon = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'guild_icon' field has been set.
      * @return True if the 'guild_icon' field has been set, false otherwise.
      */
    public boolean hasGuildIcon() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'guild_icon' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearGuildIcon() {
      guild_icon = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'guild_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getGuildName() {
      return guild_name;
    }


    /**
      * Sets the value of the 'guild_name' field.
      * @param value The value of 'guild_name'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setGuildName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.guild_name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'guild_name' field has been set.
      * @return True if the 'guild_name' field has been set, false otherwise.
      */
    public boolean hasGuildName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'guild_name' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearGuildName() {
      guild_name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nation' field.
      * @return The value.
      */
    public int getNation() {
      return nation;
    }


    /**
      * Sets the value of the 'nation' field.
      * @param value The value of 'nation'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setNation(int value) {
      validate(fields()[6], value);
      this.nation = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nation' field has been set.
      * @return True if the 'nation' field has been set, false otherwise.
      */
    public boolean hasNation() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'nation' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearNation() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'nation_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getNationName() {
      return nation_name;
    }


    /**
      * Sets the value of the 'nation_name' field.
      * @param value The value of 'nation_name'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setNationName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.nation_name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'nation_name' field has been set.
      * @return True if the 'nation_name' field has been set, false otherwise.
      */
    public boolean hasNationName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'nation_name' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearNationName() {
      nation_name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'nation_valid' field.
      * @return The value.
      */
    public boolean getNationValid() {
      return nation_valid;
    }


    /**
      * Sets the value of the 'nation_valid' field.
      * @param value The value of 'nation_valid'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setNationValid(boolean value) {
      validate(fields()[8], value);
      this.nation_valid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'nation_valid' field has been set.
      * @return True if the 'nation_valid' field has been set, false otherwise.
      */
    public boolean hasNationValid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'nation_valid' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearNationValid() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'registered' field.
      * @return The value.
      */
    public boolean getRegistered() {
      return registered;
    }


    /**
      * Sets the value of the 'registered' field.
      * @param value The value of 'registered'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setRegistered(boolean value) {
      validate(fields()[9], value);
      this.registered = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'registered' field has been set.
      * @return True if the 'registered' field has been set, false otherwise.
      */
    public boolean hasRegistered() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'registered' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearRegistered() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'registered_nation' field.
      * @return The value.
      */
    public int getRegisteredNation() {
      return registered_nation;
    }


    /**
      * Sets the value of the 'registered_nation' field.
      * @param value The value of 'registered_nation'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setRegisteredNation(int value) {
      validate(fields()[10], value);
      this.registered_nation = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'registered_nation' field has been set.
      * @return True if the 'registered_nation' field has been set, false otherwise.
      */
    public boolean hasRegisteredNation() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'registered_nation' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearRegisteredNation() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public java.lang.CharSequence getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.user = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearUser() {
      user = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_icon' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserIcon() {
      return user_icon;
    }


    /**
      * Sets the value of the 'user_icon' field.
      * @param value The value of 'user_icon'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setUserIcon(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.user_icon = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'user_icon' field has been set.
      * @return True if the 'user_icon' field has been set, false otherwise.
      */
    public boolean hasUserIcon() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'user_icon' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearUserIcon() {
      user_icon = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return user_name;
    }


    /**
      * Sets the value of the 'user_name' field.
      * @param value The value of 'user_name'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.user_name = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'user_name' field has been set.
      * @return True if the 'user_name' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'user_name' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_valid' field.
      * @return The value.
      */
    public boolean getUserValid() {
      return user_valid;
    }


    /**
      * Sets the value of the 'user_valid' field.
      * @param value The value of 'user_valid'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder setUserValid(boolean value) {
      validate(fields()[14], value);
      this.user_valid = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'user_valid' field has been set.
      * @return True if the 'user_valid' field has been set, false otherwise.
      */
    public boolean hasUserValid() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'user_valid' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.WebSession.Builder clearUserValid() {
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WebSession build() {
      try {
        WebSession record = new WebSession();
        record.alliance = fieldSetFlags()[0] ? this.alliance : (java.lang.Integer) defaultValue(fields()[0]);
        record.alliance_name = fieldSetFlags()[1] ? this.alliance_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.expires = fieldSetFlags()[2] ? this.expires : (java.lang.Long) defaultValue(fields()[2]);
        record.guild = fieldSetFlags()[3] ? this.guild : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.guild_icon = fieldSetFlags()[4] ? this.guild_icon : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.guild_name = fieldSetFlags()[5] ? this.guild_name : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.nation = fieldSetFlags()[6] ? this.nation : (java.lang.Integer) defaultValue(fields()[6]);
        record.nation_name = fieldSetFlags()[7] ? this.nation_name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.nation_valid = fieldSetFlags()[8] ? this.nation_valid : (java.lang.Boolean) defaultValue(fields()[8]);
        record.registered = fieldSetFlags()[9] ? this.registered : (java.lang.Boolean) defaultValue(fields()[9]);
        record.registered_nation = fieldSetFlags()[10] ? this.registered_nation : (java.lang.Integer) defaultValue(fields()[10]);
        record.user = fieldSetFlags()[11] ? this.user : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.user_icon = fieldSetFlags()[12] ? this.user_icon : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.user_name = fieldSetFlags()[13] ? this.user_name : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.user_valid = fieldSetFlags()[14] ? this.user_valid : (java.lang.Boolean) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WebSession>
    WRITER$ = (org.apache.avro.io.DatumWriter<WebSession>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WebSession>
    READER$ = (org.apache.avro.io.DatumReader<WebSession>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.alliance);

    out.writeString(this.alliance_name);

    out.writeLong(this.expires);

    out.writeString(this.guild);

    out.writeString(this.guild_icon);

    out.writeString(this.guild_name);

    out.writeInt(this.nation);

    out.writeString(this.nation_name);

    out.writeBoolean(this.nation_valid);

    out.writeBoolean(this.registered);

    out.writeInt(this.registered_nation);

    out.writeString(this.user);

    out.writeString(this.user_icon);

    out.writeString(this.user_name);

    out.writeBoolean(this.user_valid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.alliance = in.readInt();

      this.alliance_name = in.readString(this.alliance_name instanceof Utf8 ? (Utf8)this.alliance_name : null);

      this.expires = in.readLong();

      this.guild = in.readString(this.guild instanceof Utf8 ? (Utf8)this.guild : null);

      this.guild_icon = in.readString(this.guild_icon instanceof Utf8 ? (Utf8)this.guild_icon : null);

      this.guild_name = in.readString(this.guild_name instanceof Utf8 ? (Utf8)this.guild_name : null);

      this.nation = in.readInt();

      this.nation_name = in.readString(this.nation_name instanceof Utf8 ? (Utf8)this.nation_name : null);

      this.nation_valid = in.readBoolean();

      this.registered = in.readBoolean();

      this.registered_nation = in.readInt();

      this.user = in.readString(this.user instanceof Utf8 ? (Utf8)this.user : null);

      this.user_icon = in.readString(this.user_icon instanceof Utf8 ? (Utf8)this.user_icon : null);

      this.user_name = in.readString(this.user_name instanceof Utf8 ? (Utf8)this.user_name : null);

      this.user_valid = in.readBoolean();

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.alliance = in.readInt();
          break;

        case 1:
          this.alliance_name = in.readString(this.alliance_name instanceof Utf8 ? (Utf8)this.alliance_name : null);
          break;

        case 2:
          this.expires = in.readLong();
          break;

        case 3:
          this.guild = in.readString(this.guild instanceof Utf8 ? (Utf8)this.guild : null);
          break;

        case 4:
          this.guild_icon = in.readString(this.guild_icon instanceof Utf8 ? (Utf8)this.guild_icon : null);
          break;

        case 5:
          this.guild_name = in.readString(this.guild_name instanceof Utf8 ? (Utf8)this.guild_name : null);
          break;

        case 6:
          this.nation = in.readInt();
          break;

        case 7:
          this.nation_name = in.readString(this.nation_name instanceof Utf8 ? (Utf8)this.nation_name : null);
          break;

        case 8:
          this.nation_valid = in.readBoolean();
          break;

        case 9:
          this.registered = in.readBoolean();
          break;

        case 10:
          this.registered_nation = in.readInt();
          break;

        case 11:
          this.user = in.readString(this.user instanceof Utf8 ? (Utf8)this.user : null);
          break;

        case 12:
          this.user_icon = in.readString(this.user_icon instanceof Utf8 ? (Utf8)this.user_icon : null);
          break;

        case 13:
          this.user_name = in.readString(this.user_name instanceof Utf8 ? (Utf8)this.user_name : null);
          break;

        case 14:
          this.user_valid = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










