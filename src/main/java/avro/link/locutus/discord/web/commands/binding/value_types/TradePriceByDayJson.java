/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package link.locutus.discord.web.commands.binding.value_types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TradePriceByDayJson extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8607437119965503602L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradePriceByDayJson\",\"namespace\":\"link.locutus.discord.web.commands.binding.value_types\",\"fields\":[{\"name\":\"labels\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"java-class\":\"java.util.List\"}},{\"name\":\"prices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\",\"java-class\":\"java.util.List\"},\"java-class\":\"java.util.List\"}},{\"name\":\"timestamps\",\"type\":{\"type\":\"array\",\"items\":\"long\",\"java-class\":\"java.util.List\"}},{\"name\":\"x\",\"type\":\"string\"},{\"name\":\"y\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TradePriceByDayJson> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TradePriceByDayJson> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TradePriceByDayJson> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TradePriceByDayJson> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TradePriceByDayJson> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TradePriceByDayJson to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TradePriceByDayJson from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TradePriceByDayJson instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TradePriceByDayJson fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.CharSequence> labels;
  private java.util.List<java.util.List<java.lang.Double>> prices;
  private java.util.List<java.lang.Long> timestamps;
  private java.lang.CharSequence x;
  private java.lang.CharSequence y;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TradePriceByDayJson() {}

  /**
   * All-args constructor.
   * @param labels The new value for labels
   * @param prices The new value for prices
   * @param timestamps The new value for timestamps
   * @param x The new value for x
   * @param y The new value for y
   */
  public TradePriceByDayJson(java.util.List<java.lang.CharSequence> labels, java.util.List<java.util.List<java.lang.Double>> prices, java.util.List<java.lang.Long> timestamps, java.lang.CharSequence x, java.lang.CharSequence y) {
    this.labels = labels;
    this.prices = prices;
    this.timestamps = timestamps;
    this.x = x;
    this.y = y;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return labels;
    case 1: return prices;
    case 2: return timestamps;
    case 3: return x;
    case 4: return y;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: labels = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: prices = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 2: timestamps = (java.util.List<java.lang.Long>)value$; break;
    case 3: x = (java.lang.CharSequence)value$; break;
    case 4: y = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'labels' field.
   * @return The value of the 'labels' field.
   */
  public java.util.List<java.lang.CharSequence> getLabels() {
    return labels;
  }


  /**
   * Sets the value of the 'labels' field.
   * @param value the value to set.
   */
  public void setLabels(java.util.List<java.lang.CharSequence> value) {
    this.labels = value;
  }

  /**
   * Gets the value of the 'prices' field.
   * @return The value of the 'prices' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getPrices() {
    return prices;
  }


  /**
   * Sets the value of the 'prices' field.
   * @param value the value to set.
   */
  public void setPrices(java.util.List<java.util.List<java.lang.Double>> value) {
    this.prices = value;
  }

  /**
   * Gets the value of the 'timestamps' field.
   * @return The value of the 'timestamps' field.
   */
  public java.util.List<java.lang.Long> getTimestamps() {
    return timestamps;
  }


  /**
   * Sets the value of the 'timestamps' field.
   * @param value the value to set.
   */
  public void setTimestamps(java.util.List<java.lang.Long> value) {
    this.timestamps = value;
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public java.lang.CharSequence getX() {
    return x;
  }


  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.CharSequence value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public java.lang.CharSequence getY() {
    return y;
  }


  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.CharSequence value) {
    this.y = value;
  }

  /**
   * Creates a new TradePriceByDayJson RecordBuilder.
   * @return A new TradePriceByDayJson RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder newBuilder() {
    return new link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder();
  }

  /**
   * Creates a new TradePriceByDayJson RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradePriceByDayJson RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder(other);
    }
  }

  /**
   * Creates a new TradePriceByDayJson RecordBuilder by copying an existing TradePriceByDayJson instance.
   * @param other The existing instance to copy.
   * @return A new TradePriceByDayJson RecordBuilder
   */
  public static link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder newBuilder(link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson other) {
    if (other == null) {
      return new link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder();
    } else {
      return new link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder(other);
    }
  }

  /**
   * RecordBuilder for TradePriceByDayJson instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradePriceByDayJson>
    implements org.apache.avro.data.RecordBuilder<TradePriceByDayJson> {

    private java.util.List<java.lang.CharSequence> labels;
    private java.util.List<java.util.List<java.lang.Double>> prices;
    private java.util.List<java.lang.Long> timestamps;
    private java.lang.CharSequence x;
    private java.lang.CharSequence y;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.labels)) {
        this.labels = data().deepCopy(fields()[0].schema(), other.labels);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.prices)) {
        this.prices = data().deepCopy(fields()[1].schema(), other.prices);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[2].schema(), other.timestamps);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.x)) {
        this.x = data().deepCopy(fields()[3].schema(), other.x);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.y)) {
        this.y = data().deepCopy(fields()[4].schema(), other.y);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TradePriceByDayJson instance
     * @param other The existing instance to copy.
     */
    private Builder(link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.labels)) {
        this.labels = data().deepCopy(fields()[0].schema(), other.labels);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prices)) {
        this.prices = data().deepCopy(fields()[1].schema(), other.prices);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[2].schema(), other.timestamps);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.x)) {
        this.x = data().deepCopy(fields()[3].schema(), other.x);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.y)) {
        this.y = data().deepCopy(fields()[4].schema(), other.y);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'labels' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLabels() {
      return labels;
    }


    /**
      * Sets the value of the 'labels' field.
      * @param value The value of 'labels'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder setLabels(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.labels = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'labels' field has been set.
      * @return True if the 'labels' field has been set, false otherwise.
      */
    public boolean hasLabels() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'labels' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder clearLabels() {
      labels = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'prices' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getPrices() {
      return prices;
    }


    /**
      * Sets the value of the 'prices' field.
      * @param value The value of 'prices'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder setPrices(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[1], value);
      this.prices = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'prices' field has been set.
      * @return True if the 'prices' field has been set, false otherwise.
      */
    public boolean hasPrices() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'prices' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder clearPrices() {
      prices = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamps' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getTimestamps() {
      return timestamps;
    }


    /**
      * Sets the value of the 'timestamps' field.
      * @param value The value of 'timestamps'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder setTimestamps(java.util.List<java.lang.Long> value) {
      validate(fields()[2], value);
      this.timestamps = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamps' field has been set.
      * @return True if the 'timestamps' field has been set, false otherwise.
      */
    public boolean hasTimestamps() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamps' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder clearTimestamps() {
      timestamps = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public java.lang.CharSequence getX() {
      return x;
    }


    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder setX(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.x = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder clearX() {
      x = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public java.lang.CharSequence getY() {
      return y;
    }


    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder setY(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.y = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public link.locutus.discord.web.commands.binding.value_types.TradePriceByDayJson.Builder clearY() {
      y = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TradePriceByDayJson build() {
      try {
        TradePriceByDayJson record = new TradePriceByDayJson();
        record.labels = fieldSetFlags()[0] ? this.labels : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.prices = fieldSetFlags()[1] ? this.prices : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[1]);
        record.timestamps = fieldSetFlags()[2] ? this.timestamps : (java.util.List<java.lang.Long>) defaultValue(fields()[2]);
        record.x = fieldSetFlags()[3] ? this.x : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.y = fieldSetFlags()[4] ? this.y : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TradePriceByDayJson>
    WRITER$ = (org.apache.avro.io.DatumWriter<TradePriceByDayJson>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TradePriceByDayJson>
    READER$ = (org.apache.avro.io.DatumReader<TradePriceByDayJson>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.labels.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.labels) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.prices.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.List<java.lang.Double> e1: this.prices) {
      actualSize1++;
      out.startItem();
      long size2 = e1.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Double e2: e1) {
        actualSize2++;
        out.startItem();
        out.writeDouble(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size3 = this.timestamps.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.Long e3: this.timestamps) {
      actualSize3++;
      out.startItem();
      out.writeLong(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    out.writeString(this.x);

    out.writeString(this.y);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.labels;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("labels").schema());
        this.labels = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a1 = this.prices;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size1, SCHEMA$.getField("prices").schema());
        this.prices = a1;
      } else a1.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.util.List<java.lang.Double> e1 = (ga1 != null ? ga1.peek() : null);
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Double> a2 = e1;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("prices").schema().getElementType());
            e1 = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readDouble();
              a2.add(e2);
            }
          }
          a1.add(e1);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.lang.Long> a3 = this.timestamps;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.Long>((int)size3, SCHEMA$.getField("timestamps").schema());
        this.timestamps = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.Long> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.Long e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readLong();
          a3.add(e3);
        }
      }

      this.x = in.readString(this.x instanceof Utf8 ? (Utf8)this.x : null);

      this.y = in.readString(this.y instanceof Utf8 ? (Utf8)this.y : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.labels;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("labels").schema());
            this.labels = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a1 = this.prices;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size1, SCHEMA$.getField("prices").schema());
            this.prices = a1;
          } else a1.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.util.List<java.lang.Double> e1 = (ga1 != null ? ga1.peek() : null);
              long size2 = in.readArrayStart();
              java.util.List<java.lang.Double> a2 = e1;
              if (a2 == null) {
                a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("prices").schema().getElementType());
                e1 = a2;
              } else a2.clear();
              SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
              for ( ; 0 < size2; size2 = in.arrayNext()) {
                for ( ; size2 != 0; size2--) {
                  java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
                  e2 = in.readDouble();
                  a2.add(e2);
                }
              }
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Long> a3 = this.timestamps;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Long>((int)size3, SCHEMA$.getField("timestamps").schema());
            this.timestamps = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Long> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Long e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readLong();
              a3.add(e3);
            }
          }
          break;

        case 3:
          this.x = in.readString(this.x instanceof Utf8 ? (Utf8)this.x : null);
          break;

        case 4:
          this.y = in.readString(this.y instanceof Utf8 ? (Utf8)this.y : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










